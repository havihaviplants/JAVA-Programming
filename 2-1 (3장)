/*
[3장 문제]
//-------------------------------------------------------------
// 수정: 2023.09.19 12:10
//           오타 수정:  public static void game() 함수 내의 
//                  (priStr[priority] + " has the higher priority.") 부분의
//                  priority 단어 오타 수정하였음
//            => 이를 통보해 준 양준석 학생에게 감사드립니다.
//-------------------------------------------------------------

/******************************************************************************
 * 이번 문제의 목적: 비정방형 배열 생성, 초기화, 출력, 입력받아 초기화
 *              예외 처리, for 문 속에서 예외 처리
                입력, 출력, 배열, 조건문, 반복문, 문자열 등의 종합 응용
 ******************************************************************************/
// 아래 문제를 해결하는 도중 출력이 잘못되었거나 문제 설명과 출력이 일치하지 않거나 오타가 있거나 등등
// 조금이라도 문제에 이상한 것이 있으면 주저하지 말고 jhshim@chosun.ac.kr로 알려 주시기 바랍니다.

/******************************************************************************
 * 프로젝트 및 소스파일 생성
 ******************************************************************************/
// 이클립스에서 기존의 CH2 프로젝트를 실행하라. 
// (즉, 기존과 동일한 workspace(작업공간) 내에서 실행하라.)
// [Project Explorer]에 CH2 프로젝트가 있는 상태에서 아래를 수행하라.
// 1) 메뉴 [File]->[New]->[Java Project] 한 후 새로운 프로젝트 CH3을 만들어라.
// 2) 메뉴 [File]->[New]->[Class] 를 선택한 후 아래처럼 입력하여 Main.java 소스 파일을 작성하라.
//    이때 Package: [이 부분은 비어 있어야 함: 반드시 확인할 것]
// 이렇게 하면 기존의 CH2 프로젝트와 CH3 프로젝트를 동일 이클립스에서 수정하거나 실행할 수 있다.

//-----------------------------------------------------------------------------
// 향후 모든 과제는 위처럼 하나의 이클립스 workspace(작업공간) 내에서
// 모든 프로젝트 파일들을 생성할 예정이다. 
//-----------------------------------------------------------------------------

/******************************************************************************
 * 프로그램 테스트를 위한 입출력 파일 다운로드
 ******************************************************************************/
// 1. clc.chosun.ac.kr의 [강의자료실]에서 CH3 과제와 관련된 테스트용 파일을 다운받는다.
// 2. 압축파일을 풀면 test라는 폴더가 생성되고 그 밑에 .in 또는 .out 파일이 존재할 것이다.
// 3. 해당 test 폴더를 드래깅하여 이클립스의 [Project Explorer]의 CH3 프로젝트 위에 드랍한다.
// 4. 그러면 CH3 프로젝트 밑에 기존의 src 폴더 외에 test 폴더가 새로 생성되어 복사될 것이다.
// 5. 이 test 폴더를 펼치면 다양한 입력용 파일 .in과 출력용 .out 파일이 존재함을 확인할 수 있음

/******************************************************************************
 * 자동 오류 체크를 위한 AutoCheck.java 추가
 ******************************************************************************/
// 1. clc.chosun.ac.kr의 [강의자료실]에서 자동오류체크 소스 파일 AutoCheck.java를 다운받거나
//    또는 기존 CH2 프로젝트에 있던 AutoCheck.java를 선택한다.
// 2. AutoCheck.java 파일을 드래깅하여 이클립스의 [Project Explorer]의 CH3 프로젝트 밑의 
//    src 폴더 밑의 (defalut package) 위에 드랍한다. (이때 복사 옵션을 선택해서 삽입하라). 
// 3. 그러면 (defalut package)에 AutoCheck.java가 복사될 것이다. 
//-----------------------------------------------------------------------------


/******************************************************************************
 * [코드 추가 1]
 ******************************************************************************/
// 1) 기존의 프로젝트 CH2::Main.java의 내용을 모두 복사해서 프로젝트 CH3::Main.java에 삽입하라.
// 2) 프로그램의 맨 앞쪽 주석 부분의 "Author: " 행 다음의 내용을 아래 내용으로 교체하라.
//----------------------------------------------------------------------------

//
//  + 비정방형 배열 생성, 초기화, 출력, 입력받아 초기화
//  + 예외 처리, for 문 속에서 예외 처리
//  + 입력, 출력, 배열, 조건문, 반복문, 문자열 등의 종합 응용
//
                 
/******************************************************************************
 * [코드 추가 2]
 ******************************************************************************/
// 1) 아래 코드([코드 추가 3] 앞까지)를 복사해서 기존 Ch2 클래스 앞에 배치하라. 
//----------------------------------------------------------------------------

//===============================================================================
//class Ch3
//===============================================================================
class Ch3 
{
    public static void run() {
        String menuStr =
             "************* Ch3 Menu **************\n" +
             "* 0.Exit 1.array 2.exception 3.game *\n" +
             "*************************************\n";

        // TODO: Ch2::run() 함수를 참고하여 while문과 switch문을 작성하라.
        //       switch에서는 아래의 상응하는 함수를 호출하고, MENU_COUNT도 적절히 수정하라.
    }

    public static void array() {
        double arr1[][] = { {0}, {1,2}, {3,4,5} };
        printArray(arr1);
        double arr2[][] = { {0,1,2,3}, {4,5,6}, {7,8}, {9} };
        printArray(arr2);
    }
    public static void printArray(double arr[][]) { }
    public static void exception() { }
    public static void game() { }
}

/******************************************************************************
 * [코드 추가 3]
 ******************************************************************************/
// 1) MainMenu.run()의 menuStr을 아래처럼 변경하고, MENU_COUNT를 적절히 수정하라.
// 2) 메뉴항목 2를 선택할 경우 Ch3.run()이 호출되도록 적절한 코드를 추가하라.
//----------------------------------------------------------------------------
        String menuStr =
                "***** Main Menu ******\n" +
                "* 0.exit 1.ch2 2.ch3 *\n" +
                "**********************\n";


/******************************************************************************
 * [문제 1-1] 비정방형 배열 생성, 초기화, 출력
 ******************************************************************************/
// 아래 [문제 1-1] 실행 결과를 참고하여 printArray() 함수를 완성하라.
// printArray()는 매개변수로 전달된 arr[][] 배열의 행의 개수와 각 행의 모든 원소를 출력하되
// "arr length: ",   "arr[",   "] ",   " " 등의 문자열을 사용하라.

===============================================================================
== [문제 1-1] 실행 결과
=============================================================================== 
***** Main Menu ******
* 0.exit 1.ch2 2.ch3 *
**********************
menu item? 2

************* Ch3 Menu **************
* 0.Exit 1.array 2.exception 3.game *
*************************************
menu item? 1
arr length: 3                        // printArray() 
arr[0] 0.0 
arr[1] 1.0 2.0 
arr[2] 3.0 4.0 5.0 
                                     // 빈줄
arr length: 4                        // printArray()
arr[0] 0.0 1.0 2.0 3.0 
arr[1] 4.0 5.0 6.0 
arr[2] 7.0 8.0 
arr[3] 9.0 
                                     // 빈줄

************* Ch3 Menu **************
...

/******************************************************************************
 * [문제 1-2] 비정방형 배열 생성, 초기화, 정수 값 입력 받기
 ******************************************************************************/
// 1) 아래 코드를 기존 array() 함수의 마지막에 추가하라.
//-----------------------------------------------------------------------------

        var arr3 = inputArray();
        printArray(arr3);
        arr3 = inputArray();
        printArray(arr3);

//-----------------------------------------------------------------------------
// 2) 아래 프로그램 실행결과를 참고하여 inputArray() 함수를 구현하되, 
//    printArray() 함수 아래[뒤]에 배치하라. 이 함수 구현 시
//
//    먼저 비정방형 배열의 행의 개수를 입력 받고 UI.getPosInt("array rows? ") 활용하라.) 
//    비정방형 배열 arr을 선언하고 이 배열을 위한 메모리를 할당받는다. (예제 3-11 참고)
//    for문을 이용하여 행의 개수만큼 반복하여
//        각 행별로 필요한 메로리를 할당 받는다. (예제 3-11 참고)
//        이때 각 행의 길이는 그 행의 (인덱스+1) 값과 동일함. 즉 1행은 1개, 4행은 4개
//        "input ", " doubles for row ", ": " 등의 문자열 이용하여 출력
//        for문을 이용하여 각 행의 길이만큼 반복하여  
//             키보드로부터 실수 값을 입력 받아 해당 배열 원소 arr[i][j]에 저장한다. 
//             (키보드에서 실수는 UI.scan.nextDouble()로 입력 받으면 됨. 예제 2-4 참고)
//    생성된 배열을 반환한다. (예제 3-12 참고)
//

===============================================================================
==  [문제 1-2] 실행 결과
=============================================================================== 
menu item? 2
menu item? 1
...            // 기존의 출력과 동일
 
array rows? 3                                       // inputArray(): 입력
input 1 doubles for row 0: 1.1                      // 입력
input 2 doubles for row 1: 2.2 3.3                  // 입력
input 3 doubles for row 2: 4.4 5.5 6.6              // 입력
             
arr length: 3                                       // printArray()
arr[0] 1.1 
arr[1] 2.2 3.3 
arr[2] 4.4 5.5 6.6 
 
array rows? 5                                       // inputArray(): 입력
input 1 doubles for row 0: 1.1                      // 입력
input 2 doubles for row 1: 2.2 3.3                  // 입력
input 3 doubles for row 2: 4.4 5.5 6.6              // 입력
input 4 doubles for row 3: 7.7 8.8 9.9 10.1         // 입력
input 5 doubles for row 4: 11.1 12.2 13.3 14.4 15.5 // 입력

arr length: 5                                       // printArray()
arr[0] 1.1 
arr[1] 2.2 3.3 
arr[2] 4.4 5.5 6.6 
arr[3] 7.7 8.8 9.9 10.1 
arr[4] 11.1 12.2 13.3 14.4 15.5 


/******************************************************************************
 * [문제 2-1] 예외 처리
 ******************************************************************************/
// 아래 [문제 2-1] 실행결과-1과 실행결과-2는 메뉴항목을 잘못 입력했을 때 발생하는 예외발생 시의 에러이다.
// 메뉴항목 값으로 정수를 입력하지 않고 문자열이나 실수를 입력했을 경우 발생하며 디폴트로 프로그램이 종료한다.
// 이런 예상치 않은 프로그램 종료를 막으려면 프로그램에 예외 처리를 해 주어야 한다.

// InputMismatchException을 처리하여 프로그램이 비정상적으로 종료되지 않고 
// [문제 2-1 실행결과-3]처럼 출력되도록 UI.getInt() 함수를 수정하라. 

// 이 예외의 처리를 위해
   while() {
      try { }
      catch() { }
   }
// 형식으로 프로그램을 작성해야 한다.
// (반복 수행하는 while 루프는 예제 3-15 참고)

// 주의: [문제 2-1 실행결과-4]처럼 예외 처리하는 try catch 문장을 추가한 후에
//      실행 결과처럼 예외가 발생할 경우, 무한 루프를 도는 경우가 발생할 수 있다. 
//      이는 잘못 입력된 실수값이나 문자열이 계속 입력 스트림 버퍼에 남아 있기 때문에 이를 버퍼에서 
//      제거하지 않으면 계속해서 같은 실수값 또는 문자열이 읽혀지기 때문에 무한루프가 발생한다.
//      이러한 무한루프가 발생하지 않도록 하기 위해서는 catch 내에서 scan.nextLine()를 호출하여 
//      현재 입력 스트림 버퍼에 남아 있는 행 전체를 지워 주어야 한다.

// 프로그램이 계속 무한 루프 돌 때는 이클립스의 Console(콘손) 창의 오른쪽 위의 X 버튼 옆의 
// [빨간 사각형 박스]를 눌러서 프로그램을 강제로 종료시킬 수 있다.

// 그리고 import java.util.InputMismatchException; 문장도 포함해야 함
// 먼저 import한 java.util.Scanner와 더불어 매번 새로운 클래스를 import시키기 귀찮으면
// import java.util.*;로 하면 된다. 이렇게 하면 java.util에 있는 모든 클래스를 
// import시키는 것이므로 java.util. 로 시작하는 클래스들은 더이상 import시키지 않아도 됨

===============================================================================
==  [문제 2-1] 실행결과-1 : 문자열을 입력한 경우 예외 발생
=============================================================================== 
***** Main Menu ******
* 0.exit 1.ch2 2.ch3 *
**********************
menu item? ch3
Exception in thread "main" java.util.InputMismatchException
	at java.base/java.util.Scanner.throwFor(Scanner.java:939)
	...

===============================================================================
==  [문제 2-1] 실행결과-2 : 정수대신 실수를 입력한 경우 예외 발생
=============================================================================== 
***** Main Menu ******
* 0.exit 1.ch2 2.ch3 *
**********************
menu item? 1.2
Exception in thread "main" java.util.InputMismatchException
	at java.base/java.util.Scanner.throwFor(Scanner.java:939)
	...

===============================================================================
==  [문제 2-1] 실행결과-3 : 예외 처리가 된 정상적인 경우
=============================================================================== 
***** Main Menu ******
* 0.exit 1.ch2 2.ch3 *
**********************
menu item? ch3
Input an INTEGER. Try again!!

***** Main Menu ...
menu item? 1.2
Input an INTEGER. Try again!!

***** Main Menu ...
menu item? 0

Good bye!!

===============================================================================
==  [문제 2-1] 실행결과-4 : 무한 루프 발생 가능성
=============================================================================== 
***** Main Menu ******
* 0.exit 1.ch2 2.ch3 *
**********************
menu item? ch3
Input an INTEGER. Try again!!

***** Main Menu ******
* 0.exit 1.ch2 2.ch3 *
**********************
menu item? Input an INTEGER. Try again!!
...
menu item? Input an INTEGER. Try again!!
...
menu item? Input an INTEGER. Try again!!

... // 잘못 코딩하면 동일한 메시지 계속 출력하면서 무한 루프 돌 수 있음


/******************************************************************************
 * [문제 2-1-1] 예외 객체 출력
 ******************************************************************************/
// UI.getInt() 함수 내의 catch 문장 내의 "Input an INTEGER. Try again!!"를 출력하는
// 문장 앞에 아래 문장을 추가하고 실행하여 실행 결과를 확인하라.

                System.out.println(e); // 예외 종류 출력
                System.out.println("-----"); 
                e.printStackTrace();   // 예외에 대한 상세한 정보 출력

// 확인이 끝났으면 이 문장들을 다시 주석 처리하라.

===============================================================================
==  [문제 2-1-1] 실행결과
=============================================================================== 
***** Main Menu ...
menu item? ch2
java.util.InputMismatchException
-----
java.util.InputMismatchException
	at java.base/java.util.Scanner.throwFor(Scanner.java:939)
	at java.base/java.util.Scanner.next(Scanner.java:1594)
	at java.base/java.util.Scanner.nextInt(Scanner.java:2258)
	at java.base/java.util.Scanner.nextInt(Scanner.java:2212)
	at UI.getInt(Main.java:87) // 숫자 87을 클릭하면 소스코드의 해당 행으로 이동함
	at UI.getPosInt(Main.java:121)
	at UI.getIndex(Main.java:108)
	at UI.selectMenu(Main.java:78)
	at MainMenu.run(Main.java:52)
	at Main.run(Main.java:35)
	at Main.main(Main.java:29)
Input an INTEGER. Try again!!


/******************************************************************************
 * [코드 추가 4] 예외 처리
 ******************************************************************************/
// 기존 Ch3.exception() 함수를 아래 코드로 대체하라.
//-----------------------------------------------------------------------------

    //------------------------------------------------------------------------
    // Exception
    //------------------------------------------------------------------------
    static Random random = null; // 난수 발생기
    
    public static void exception() {
        var random = new Random(UI.getInt("seed for random number? "));// 난수 발생기
        String str = UI.getNext("array[] size? ");
        int i = Integer.parseInt(str);   // 문자열 숫자를 정수로 변환: "123" -> 123
        int arr[] = new int[i];

        for (i = 0; i < arr.length; ++i) // arr[] 전체를 난수 값으로 초기화
            arr[i] = random.nextInt(3);  // [0,1,2] 범위의 난수 발생
        System.out.print("array[]: { ");
        for (var v : arr)                // 배열 전체 출력
            System.out.print(v+" ");     // 각각의 v=arr[i] 원소 값을 출력함  
        System.out.println("}");

        i = UI.getPosInt("array[] index? ");
        System.out.println("array["+i+"] = "+arr[i]);

        int numerator   = UI.getIndex("numerator   index? ", arr.length); // 분자 index
        int denominator = UI.getIndex("denominator index? ", arr.length); // 분모 index
        System.out.println(arr[numerator]+" / "+arr[denominator]+" = "
            +(arr[numerator] / arr[denominator]));

        System.out.println("makeArray(): first");
        arr = makeArray();

        System.out.println("makeArray(): second");
        arr = makeArray();
        System.out.println("array length = "+arr.length);
    }

    // tag 0: OutOfMemoryError, 1: return null pointer, 2: return normal array
    public static int[] makeArray() { 
        int tag = UI.getPosInt("makeArray tag[0,1,2]? ");
    	return (tag == 0)? new int[0x7fffffff]: (tag == 1)? null: new int[10]; 
    }
    
//-----------------------------------------------------------------------------
// 위 프로그램을 실행하면 아래 [실행결과-1] ~ [실행결과-6]과 같은 예외가 발생할 수 있다.
===============================================================================
== 실행결과-1 : NumberFormatException 예외 발생
=============================================================================== 
***** Main Menu ...
menu item? 2

************* Ch3 Menu **************
* 0.Exit 1.array 2.exception 3.game *
*************************************
menu item? 2
seed for random number? 0
array[] size? abc
Exception in thread "main" java.lang.NumberFormatException: For input string: "abc"
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:68)
	...

===============================================================================
== 실행결과-2 : NegativeArraySizeException 예외 발생
=============================================================================== 
... // 위 실행결과와 동일
array[] size? -10
Exception in thread "main" java.lang.NegativeArraySizeException: -10
	at Ch3.exception(Main.java:204)
	...

===============================================================================
== 실행결과-3 : ArrayIndexOutOfBoundsException 예외 발생
=============================================================================== 
... // 위 실행결과와 동일
array[] size? 10
array[]: { 0 1 1 2 2 2 2 0 0 2 }
array[] index? -10
Input a positive INTEGER. Try again!!
array[] index? 15
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 
Index 15 out of bounds for length 10
	at Ch3.exception(Main.java:213)
	...

===============================================================================
== 실행결과-4 : ArithmeticException 예외 발생
=============================================================================== 
... // 위 실행결과와 동일
array[] index? 0
array[0] = 0
numerator   index? 1
denominator index? 0
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at Ch3.exception(Main.java:216)
	...

===============================================================================
== 실행결과-5 : OutOfMemoryError 예외 발생
=============================================================================== 
... // 위 실행결과와 동일
numerator   index? 3
denominator index? 1
2 / 1 = 2
makeArray(): first
makeArray tag[0,1,2]? 0
Exception in thread "main" java.lang.OutOfMemoryError: 
Requested array size exceeds VM limit
	at Ch3.makeArray(Main.java:224)
	...

===============================================================================
== 실행결과-6 : NullPointerException 예외 발생
=============================================================================== 
... // 위 실행결과와 동일
makeArray(): first
makeArray tag[0,1,2]? 2
makeArray(): second
makeArray tag[0,1,2]? 1
Exception in thread "main" java.lang.NullPointerException: 
Cannot read the array length because "arr" is null
	at Ch3.exception(Main.java:219)
	...


/******************************************************************************
 * [문제 2-2] 예외 처리
 ******************************************************************************/
// 아래 실행 결과를 참고하여 Ch3.exception() 함수에 예외처리하는 코드를 삽입하라.
// makeArray()는 수정하지 마라.
// 각각의 예외처리 시 while 문을 이용하여 예외가 발생하지 않을 때까지 
// 다시 입력을 받는 과정을 반복 수행하여야 한다.
// 각 예외를 catch 했을 경우 아래처럼 출력하라.
       catch (...Exception e) { System.out.println(e); }

// 단, NullPointerException의 경우는 System.out.println(e)로 출력하는 대신
// (PC와 oj의 출력이 서로 다르기 때문에)
// System.out.println("NullPointerException")으로 출력하라. 
//-----------------------------------------------------------------------------

===============================================================================
== [문제 2-2] 실행결과 : 예외 처리한 정상적인 경우
=============================================================================== 
***** Main Menu ...
menu item? 2

************* Ch3 Menu ...
menu item? 2
seed for random number? 0
array[] size? abc
java.lang.NumberFormatException: For input string: "abc"
array[] size? 4.5
java.lang.NumberFormatException: For input string: "4.5"
array[] size? -10
java.lang.NegativeArraySizeException: -10
array[] size? 10
array[]: { 0 1 1 2 2 2 2 0 0 2 }
array[] index? 15
java.lang.ArrayIndexOutOfBoundsException: Index 15 out of bounds for length 10
array[] index? 9
array[9] = 2
numerator   index? 3
denominator index? 0
java.lang.ArithmeticException: / by zero
denominator index? 8
java.lang.ArithmeticException: / by zero
denominator index? 2
2 / 1 = 2
makeArray(): first
makeArray tag[0,1,2]? 0
java.lang.OutOfMemoryError: Requested array size exceeds VM limit
makeArray tag[0,1,2]? 2
makeArray(): second
makeArray tag[0,1,2]? 1
NullPointerException   // 이 경우 System.out.println(e)로 출력하는 대신      
                       // System.out.println("NullPointerException")으로 출력하라.
makeArray tag[0,1,2]? 2
array length = 10

/******************************************************************************
 * [문제 3] 입력, 출력, 배열, 조건문, 반복문, 문자열 등의 종합 응용
 ******************************************************************************/
// 컴퓨터와 사용자 사이의 묵-찌-빠 게임을 만들어 보자. 
// 기존 Ch3.game() 함수에 아래 코드를 삽입하고 프로그램 실행결과를 참고하여  
// 함수 내 지시에 따라 함수를 완성하라.
//-----------------------------------------------------------------------------

    public static void game() {
        final int USER = 0;     // 상수 정의
        final int COMPUTER = 1;
        String MJBarray[] = { "m", "j", "b" }; // 묵(m) 찌(j) 빠(b) 문자열을 가진 배열
        System.out.println("Start the MUK-JJI-BBA game.");
        // 난수 발생기
        random = new Random(UI.getInt("seed for random number? "));
        // 누가 우선권을 가졌는지 저장하고 있음, USER:사용자 우선권, COMPUTER:computer 우선권
        int priority = USER; 
        String priStr[] = { "USER", "COMPUTER"}; // 우선권을 화면에 출력할 때 사용할 문자열

        while(true) {
            System.out.println();
            화면에 (priStr[priority] + " has the higher priority.")를 출력
            UI.getNext()를 사용하여 화면에 "m(muk), j(jji), b(bba) or stop? "를 출력하고
            사용자가 입력한 묵찌빠 문자열을 넘겨 받아 user 변수에 저장 (사용자가 묵찌빠 중 하나 선택)
            사용자가 입력한 문자열이 "stop"이면 게임 종료 
            // 사용자가 입력한 문자열을 비교할 때는 if (user.equals("stop")) 문장을 사용 
            사용자가 m, j, b를 입력하지 않고 다른 문자열을 입력했다면 
                "Select one among m, j, b."를 출력하고 while()의 처음부터 다시 시작
            // [0,1,2] 난수를 이용하여 COMPUTER가 묵찌빠 중 하나를 선택함
            String computer = MJBarray[random.nextInt(MJBarray.length)];
            user와 computer 변수를 이용하여 화면에 사용자, 컴퓨터가 낸 묵찌빠 값을 출력 
                (예:User = m, Computer = b, )
            이후 user와 computer 문자열을 비교하여 같으면 
                // user와 computer 두 문자열 비교하는 방법: if (user.equals(computer)) 
                // 우선권을 가진 사람의 묵찌빠와 동일한 묵찌빠를 상대방이 냈을 경우 우선권을 가진 사람이 승리함
                우선권을 가진 자(priStr[priority])가 " WINs." 했다고 출력하고
            같지 않으면 (비겼음) 
                "SAME." 출력
                현 상황을 (가위바위보)라 가정하고 누가 이겼는지 판단하여 우선권(priority)을 가진자 결정 
                즉, priority 값을 가위바위보상 이긴 자(USER 또는 COMPUTER)로 변경함
                (아주 긴 조건문이 될 것임)
        }
    }

===============================================================================
==  [문제 3] 실행결과
=============================================================================== 
***** Main Menu ...
menu item? 2

************* Ch3 Menu ...
menu item? 3
Start the MUK-JJI-BBA game.
seed for random number? 0

USER has the higher priority.
m(muk), j(jji), b(bba) or stop? k
Select one among m, j, b.

USER has the higher priority.
m(muk), j(jji), b(bba) or stop? m
User = m, Computer = m, USER WINs.

USER has the higher priority.
m(muk), j(jji), b(bba) or stop? b
User = b, Computer = j, SAME.

COMPUTER has the higher priority.
m(muk), j(jji), b(bba) or stop? j
User = j, Computer = j, COMPUTER WINs.

COMPUTER has the higher priority.
m(muk), j(jji), b(bba) or stop? j
User = j, Computer = b, SAME.

USER has the higher priority.
m(muk), j(jji), b(bba) or stop? b
User = b, Computer = b, USER WINs.

USER has the higher priority.
m(muk), j(jji), b(bba) or stop? stop

************* Ch3 Menu ...
menu item? 


/******************************************************************************
 * 프로그램의 자동오류체크 방법
 ******************************************************************************/
// clc.chosun.ac.kr의 [강의자료실]의 "자동_오류_체크_방법" 파일을 참고하기 바란다.

/******************************************************************************
 * 자동오류체크 실행결과
 ******************************************************************************/
test_1 : O
test_2 : O
test_3 : O
Good bye!!

/******************************************************************************
 * 프로그램 제출
 ******************************************************************************/
// 1. 중요: Main.java의 main() 함수 내에서 아래 문장처럼 [주석] 처리한 후 저장하라.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else
//    경고: 위 문장을 주석처리 하지 않은 채 제출할 경우 oj 시스템에서 컴파일 에러가 발생할 것이다. 
// 2. 프로그램 소스인 Main.java만을 oj.chosun.ac.kr에 제출하라. 
//    제출 시 AutoCheck.java 파일은 제출하지 않아도 된다.
//-----------------------------------------------------------------------------


*/

import java.util.*;

public class Main 
{
    public static void main(String[] args) {
        // ...
        run(new Scanner(System.in));
    }

    public static void run(Scanner scan) {
        UI.setScanner(scan);
        MainMenu.run();
        scan.close();
    }
}


class MainMenu {
    public static void run() {
        final int MENU_COUNT = 3; // Menu count를 3으로 변경
        
        String menuStr =
                "***** Main Menu ******\n" +
                "* 0.exit 1.ch2 2.ch3 *\n" +
                "**********************\n";

        int menuItem;
        do {
            System.out.print(menuStr); 
            menuItem = UI.selectMenu(MENU_COUNT); 

            switch(menuItem) {
                case 1:
                    Ch2.run();
                    break;
                case 2:
                    Ch3.run(); // Ch3 클래스의 run 메소드 호출
                    break;
                case 0:
                    break;
                default:
                    break;
            }
            
        } while(menuItem != 0);

        System.out.println("\nGood bye!!");
    }
}

class UI
{
    public static boolean echo_input = false; // 자동오류체크 시 true로 설정됨
    public static Scanner scan;

    public static void setScanner(Scanner s) { scan = s; }

    public static int getInt(String msg) {
        int input = 0;
        boolean isValid = false;

        while (!isValid) {
            System.out.print(msg);
            try {
                input = scan.nextInt();
                isValid = true;
            } catch (InputMismatchException e) {
                System.out.println(e); // 예외 종류 출력
                System.out.println("-----");
                e.printStackTrace();   // 예외에 대한 상세한 정보 출력
                System.out.println("Input an INTEGER. Try again!!");
                scan.nextLine(); // 입력 스트림 버퍼의 잘못된 값 제거
            }
        }

        return input;
    }
    
    public static int getPosInt(String msg) { 
        int value;
        while (true) {
            value = getInt(msg);
            if (value >= 0) {
                break;
            }
            System.out.println("Input a positive INTEGER. Try again!!");
        }
        return value;
    }
    
    public static int getIndex(String prompt, int max) {
        while (true) {
            int value = getInt(prompt);

            if (value < 0) {
                System.out.println("Input a positive INTEGER. Try again!!\n");
            } else if (value >= max) {
                System.out.println(value + ": OUT of selection range(0 ~ " + (max - 1) + ") Try again!!\n");
            } else {
                return value;
            }
        }
    }
    
    public static int selectMenu(int menuCount) {
        return getIndex("menu item? ", menuCount); // "menu item?"만 출력
    }
    
    public static String getNext(String msg) {
        System.out.print(msg);  
        String input = scan.next(); 
        scan.nextLine(); // 버퍼 내의 줄 바꿈 문자 제거

        if (echo_input) {
            System.out.println(input);
        }

        return input;
    }

    public static String getNextLine(String msg) {
        System.out.print(msg);  // 메시지 출력
        String input = scan.nextLine(); // 사용자 입력 받기

        if (echo_input) { // 입력 내용을 출력할 경우
            System.out.println(input);
        }

        return input;
    }
}

class Ch3 
{
    public static void run() {
        final int MENU_COUNT = 4;

        String menuStr =
             "************* Ch3 Menu **************\n" +
             "* 0.Exit 1.array 2.exception 3.game *\n" +
             "*************************************\n";

        int menuItem;
        do {
            System.out.println();
            System.out.print(menuStr); 
            menuItem = UI.selectMenu(MENU_COUNT); 

            switch(menuItem) {
            case 1:
                array();
                break;
            case 2:
                exception();
                break;
            case 3:
                game();
                break;
            default:
                break;
            }
        } while(menuItem != 0);
    }

    public static void array() {
        double arr1[][] = { {0}, {1,2}, {3,4,5} };
        printArray(arr1);
        double arr2[][] = { {0,1,2,3}, {4,5,6}, {7,8}, {9} };
        printArray(arr2);
        
        var arr3 = inputArray();
        printArray(arr3);
        arr3 = inputArray();
        printArray(arr3);
    }

    public static void printArray(double arr[][]) {
        System.out.println("arr length: " + arr.length);
        for(int i=0; i < arr.length; i++) {
            System.out.print("arr[" + i + "] ");
            for(int j=0; j < arr[i].length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println(); // 빈줄 출력
    }
    
    public static double[][] inputArray() {
        int rows = UI.getPosInt("array rows? "); // 행의 개수를 입력받음
        double[][] arr = new double[rows][]; // 비정방형 배열 생성

        for (int i = 0; i < rows; i++) {
            arr[i] = new double[i + 1]; // 각 행의 길이는 그 행의 (인덱스+1) 값과 동일함

            System.out.print("input " + (i+1) + " doubles for row " + i + ": ");
            for (int j = 0; j < arr[i].length; j++) {
                arr[i][j] = UI.scan.nextDouble(); // 실수 값 입력 받기
            }
        }

        return arr; // 생성된 배열을 반환
    }


    static Random random = null; // 난수 발생기
    
    public static void exception() {
        var random = new Random(UI.getInt("seed for random number? "));
        int arr[] = null;

        while (true) {
            try {
                String str = UI.getNext("array[] size? ");
                int i = Integer.parseInt(str);
                arr = new int[i];
                break;
            } catch (NumberFormatException e) {
                System.out.println(e);
            } catch (NegativeArraySizeException e) {
                System.out.println(e);
            }
        }

        for (int i = 0; i < arr.length; ++i)
            arr[i] = random.nextInt(3);

        System.out.print("array[]: { ");
        for (var v : arr)
            System.out.print(v + " ");
        System.out.println("}");

        while (true) {
            try {
                int i = UI.getPosInt("array[] index? ");
                System.out.println("array[" + i + "] = " + arr[i]);
                break;
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println(e);
            }
        }

        int numerator = UI.getIndex("numerator   index? ", arr.length);
        while (true) {
            try {
                int denominator = UI.getIndex("denominator index? ", arr.length);
                System.out.println(arr[numerator] + " / " + arr[denominator] + " = " + (arr[numerator] / arr[denominator]));
                break;
            } catch (ArithmeticException e) {
                System.out.println(e);
            }
        }

        System.out.println("makeArray(): first");
        while (true) {
            try {
                arr = makeArray();
                break;
            } catch (OutOfMemoryError e) {
                System.out.println("java.lang.OutOfMemoryError: " + e.getMessage());
            }
        }

        System.out.println("makeArray(): second");
        while (true) {
            try {
                arr = makeArray();
                System.out.println("array length = " + arr.length);
                break;
            } catch (NullPointerException e) {
                System.out.println("NullPointerException");
            }
        }
    }


    
    // tag 0: OutOfMemoryError, 1: return null pointer, 2: return normal array
    
    public static int[] makeArray() { 
        int tag = UI.getPosInt("makeArray tag[0,1,2]? ");
    	return (tag == 0)? new int[0x7fffffff]: (tag == 1)? null: new int[10]; 
    }
    
    public static void game() {
        final int USER = 0;
        final int COMPUTER = 1;
        String MJBarray[] = { "m", "j", "b" };
        System.out.println("Start the MUK-JJI-BBA game.");
        random = new Random(UI.getInt("seed for random number? "));
        int priority = USER; 
        String priStr[] = { "USER", "COMPUTER"};

        while(true) {
            System.out.println();
            System.out.println(priStr[priority] + " has the higher priority.");
            String user = UI.getNext("m(muk), j(jji), b(bba) or stop? ");

            if (user.equals("stop")) {
                break;
            }
            if (!user.equals("m") && !user.equals("j") && !user.equals("b")) {
                System.out.println("Select one among m, j, b.");
                continue;
            }

            String computer = MJBarray[random.nextInt(MJBarray.length)];

            if (user.equals(computer)) {
                System.out.print("User = " + user + ", Computer = " + computer + ", ");
                if (priority == USER) {
                    System.out.println("USER WINs.");
                } else {
                    System.out.println("COMPUTER WINs.");
                }
            } else {
                System.out.println("User = " + user + ", Computer = " + computer + ", SAME.");
                if ((user.equals("m") && computer.equals("j")) || 
                    (user.equals("j") && computer.equals("b")) || 
                    (user.equals("b") && computer.equals("m"))) {
                    priority = USER;
                } else {
                    priority = COMPUTER;
                }
            }
        }
    }


}


class Ch2 
{
	public static void run() {
	    final int MENU_COUNT = 6;

	    String menuStr =
	         "************* Ch2 Menu ***********\n" +
	         "* 0.exit 1.output 2.readToken    *\n" +
	         "* 3.readLine 4.operator 5.switch *\n" +
	         "**********************************\n";

	    int menuItem;
	    do {
	        System.out.println();
	        System.out.print(menuStr); 
	        menuItem = UI.selectMenu(MENU_COUNT); 

	        switch(menuItem) {
	        case 1:
	            output();
	            break;
	        case 2:
	            readToken(); 
	            break;
	        case 3:
	            readLine();
	            break;
	        case 4:  // operator를 선택한 경우
	            operator();
	            break;
            case 5:
                switchCase();
                break;
	        default:
	            break;
	    }
	    } while(menuItem != 0);
	}

    public static void output() {
        String toolName = "JDK";
        double version = 1.8;
        String released = "is released.";

        System.out.println(toolName + version + released);
        System.out.println(toolName + " " + version + " " + released);

        int i1 = 1, i2 = 2, i3 = 3; 
        
        System.out.println(i1 + i2 + i3);
        System.out.println("" + i1 + i2 + i3);
        System.out.println((i1 + i2 + i3) + " " + i1 + i2 + i3);

        boolean b = true;
        double d = 1.2;

        System.out.println(b + " " + !b + " " + d);
    }
    
    public static void readToken() {

        String name;    // 이름
        int id;         // Identifier
        double weight;  // 체중
        boolean married; // 결혼여부
        String address; // 주소

        System.out.print("person information(name id weight married :address:): ");

        name = UI.scan.next();
        id = UI.scan.nextInt();
        weight = UI.scan.nextDouble();
        married = UI.scan.nextBoolean();

        while ((address = UI.scan.findInLine(":.*:")) == null)
        	UI.scan.nextLine();  
        address = address.substring(1, address.length()-1); 
        System.out.println(name + " " + id + " " + weight + " " + married + " :" + address + ":");
    }

    public static void readLine() {
        String name = UI.getNext("name? "); 
        System.out.println("name: " + name);
        
        int id = UI.getInt("id? ");         
        System.out.println("id: " + id);
        
        String address = UI.getNextLine("address? ");
        System.out.println("address :" + address + ":");
    }
    
    public static void printBinStr(int v) {
    	String s = Integer.toBinaryString(v);
        for (int i=0; i < (32-s.length()); ++i)
            System.out.print('0');
        System.out.println(s);
    }
    
    public static void operator() {
        int b = 0b11111111_00000000_11111111_11111111;
        printBinStr(b);

        // TODO: 변수 b를 왼쪽으로 4비트 이동시킨 값을 출력하라.
        b = b << 4;
        printBinStr(b);

        System.out.println();
        b = 0b11111111_00000000_00000000_11111111;
        printBinStr(b);

        // TODO: 변수 b를 4비트 산술적 오른쪽 시프트를 한 값을 출력하라.
        b = b >> 4;
        printBinStr(b);

        // TODO: 변수 b를 4비트 논리적 오른쪽 시프트를 한 값을 출력하라.
        b = 0b11111111_00000000_00000000_11111111; // 다시 초기화
        b = b >>> 4;
        printBinStr(b);
    }

    public static void switchCase() {
        String menuStr =
            "********* Switch Menu *********\n" +
            "* 0.exit 1.output 2.readToken *\n" +
            "* 3.readLine 4.operator       *\n" +
            "*******************************\n";

        while (true) {
            String menu = UI.getNext("\n"+menuStr+"menu item string? ");
            
            switch(menu) {
                case "exit":
                    return;
                case "output":
                    output();
                    break;
                case "readToken":
                    readToken();
                    break;
                case "readLine":
                    readLine();
                    break;
                case "operator":
                    operator();
                    break;
                default:
                    System.out.println("Invalid menu item. Try again!");
                    break;
            }
        }
    }
}    
