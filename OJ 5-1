[5장 문제-1]

수정: 10.8 7:45 
      문제 2-6 w3.println("w3    : "); ----> w3.println("w3: ");
      이 문제를 지적해 준 임정훈 학생에게 감사드립니다. 


// 아래 문제를 해결하는 도중 출력이 잘못되었거나 문제 설명과 출력이 일치하지 않거나 오타가 있거나 등등
// 조금이라도 문제에 이상한 것이 있으면 주저하지 말고 jhshim@chosun.ac.kr로 알려 주시기 바랍니다.

/******************************************************************************
 * 프로젝트 및 소스파일 생성
 ******************************************************************************/
// 이클립스에서 기존의 CH4-2 프로젝트를 실행하라. 
// (즉, 기존과 동일한 workspace(작업공간) 내에서 실행하라.)
// [Project Explorer]에 CH4-2 프로젝트가 있는 상태에서 아래를 수행하라.
// 1) 메뉴 [File]->[New]->[Java Project] 한 후 새로운 프로젝트 CH5-1을 만들어라.
// 2) 메뉴 [File]->[New]->[Class] 를 선택한 후 아래처럼 입력하여 Main.java 소스 파일을 작성하라.
//    Source folder: CH5-1/src
//    Package: [이 부분은 비어 있어야 함: 반드시 확인할 것]
//    Name: Main
//    Modifiers: public

/******************************************************************************
 * 프로그램 테스트를 위한 입출력 파일 다운로드
 ******************************************************************************/
// 1. clc.chosun.ac.kr의 [강의자료실]에서 CH5-1 과제와 관련된 테스트용 파일을 다운받는다.
// 2. 압축파일을 풀면 test라는 폴더가 생성되고 그 밑에 .in 또는 .out 파일이 존재할 것이다.
// 3. 해당 test 폴더를 드래깅하여 이클립스의 [Project Explorer]의 CH5-1 프로젝트 위에 드랍한다.
// 4. 그러면 CH5-1 프로젝트 밑에 기존의 src 폴더 외에 test 폴더가 새로 생성되어 복사될 것이다.
// 5. 이 test 폴더를 펼치면 다양한 입력용 파일 .in과 출력용 .out 파일이 존재함을 확인할 수 있음
//    만약 test 폴더 밑에 또 test 폴더가 있다면(즉, test/test) 안쪽 test 폴더를 사용하라. 

/******************************************************************************
 * 자동 오류 체크를 위한 AutoCheck.java 추가
 ******************************************************************************/
// 1. clc.chosun.ac.kr의 [강의자료실]에서 자동오류체크 소스 파일 AutoCheck.java를 다운받거나
//    또는 기존 프로젝트에 있던 AutoCheck.java를 선택한다.
// 2. AutoCheck.java 파일을 드래깅하여 이클립스의 [Project Explorer]의 CH5-1 프로젝트 밑의 
//    src 폴더 밑의 (defalut package) 위에 드랍한다. (이때 복사 옵션을 선택해서 삽입하라). 
// 3. 그러면 (defalut package)에 AutoCheck.java가 복사될 것이다. 
//-----------------------------------------------------------------------------


/******************************************************************************
 * [코드 추가 1]
 ******************************************************************************/
// 1) 기존의 프로젝트 CH4-2::Main.java의 내용을 모두 복사해서 프로젝트 CH5-1::Main.java에 삽입하라.
// 2) 프로그램의 맨 앞쪽 주석 부분의 "Author: " 행 다음의 내용을 아래 내용으로 교체하라.
//----------------------------------------------------------------------------

//  + Person을 상속 받는 Student, Worker 클래스 추가
//  + Person에 복사생성자 추가, clone() 수정, assign() 오버라이딩 위치로 이동
//  + Inheritance 클래스 추가
//  + MainMenu 수정

            
/******************************************************************************
 * [코드 추가 2] 아래Student, Worker 클래스를 기존의 Person 클래스 아래에 배치하라. 
 ******************************************************************************/

class Student { // TODO: Person 클래스를 상속하라.
    private String department; // 학과
    private double GPA;        // 평균평점
    private int year;          // 학년

    public Student(String name, int id, double weight, boolean married, String address,
                   String department, double GPA, int year) {
        // TODO: 수퍼(부모)클래스의 생성자를 호출하여 수퍼 클래스 멤버들을 초기화하라.
        //set(department, GPA, year); 
        //System.out.print("Student():"); printMembers(); System.out.println();
    }
    // getter and setter

    // Overriding

    // printMembers(), inputMembers(Scanner sc)
   
    // 새로 추가된 메소드
    public void study() { 
        //System.out.println(getName()+" is studying as a "+year+"-year student in "+department); 
    }
    public void takeClass() { 
        //System.out.println(getName()+" took several courses and got GPA "+GPA); 
    }
}

class Worker { // TODO: Person 클래스를 상속하라.
    private String company;    // 회사명
    private String position;   // 직급

    public Worker(String name, int id, double weight, boolean married, String address,
                  String company, String position) {
    }
    // getter and setter

    // Overriding

    // printMembers(), inputMembers(Scanner sc)
    
    // 새로 추가된 메소드
    public void work() { 
        //System.out.println(getName()+" works in "+company+" as "+position); 
    }
    public void goOnVacation() { 
        //System.out.println(getName()+" is now enjoying his(her) vacation."); 
    }
}
      
/******************************************************************************
 * [코드 추가 3] 기존의 MultiManager 클래스 아래(class Ch3 앞)에 
 *             아래의 Inheritance 클래스를 삽입하라. 
 ******************************************************************************/

class Inheritance
{
    Student s;
    Worker  w;

    public Inheritance() {
        s = new Student("s1", 1, 65.4, true,  "Jongno-gu Seoul",  "Physics", 3.8, 1);
        w = new Worker ("w1", 3, 33.3, false, "Kangnam-gu Seoul", "Samsung", "Director");
    }    
    public void run() {
        String menuStr =
             "***** Inheritance Menu ******\n" +
             "* 0.exit 1.Student 2.Worker *\n" +
             "*****************************\n";
        final int MENU_COUNT = 3; // 상수 정의
        while (true) {
            int menuItem = UI.selectMenu(menuStr, MENU_COUNT);
            switch(menuItem) {
            case 1: student(); break;
            case 2: worker();  break;
            case 0:            return;
            }
        }
    }
    void compare(Person p1, Person p2) {
        p1.println("p1: ");
        p2.println("p2: ");
        System.out.println("p1.equals(p2) : " + p1.equals(p2));
        System.out.println("--------------------");
    }
    Person whatAreYouDoing(Person p) {
        p.whatAreYouDoing();
        return p;
    }
    void input(Person p, String msg) {
        System.out.print("input "+msg+": ");
        p.input(UI.scan);
        if (UI.echo_input) p.println(); // 자동체크에서 사용됨
    }
    void student() {
    }
    void worker() {
    }
}   // Inheritance class: ch5_1

/******************************************************************************
 * 문제: 0
 ******************************************************************************/
// 0) 이 상태에서 프로그램이 정상적으로 컴파일되고 실행되어야 한다.
// 1) 아래의 프로그램 실행결과를 참고하여 MainMenu 클래스의 menuStr과 MENU_COUNT을 수정하라.
// 2) MainMenu 클래스의 switch문의 case 1)을 참고하여  
//    4번 메뉴항목을 선택할 경우 Inheritance 클래스의 run() 멤버 함수를 호출하라.
//-----------------------------------------------------------------------------

===============================================================================
== 프로그램 실행 결과: 프로그램을 실행하면 아래와 같이 출력되어야 한다.
=============================================================================== 

******* Main Menu ********
* 0.exit 1.PersonManager *
* 2.ch2 3.ch3 4.ch5      *
**************************
menu item? 4

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 

===============================================================================
== 각 클래스 설명
=============================================================================== 
Student 클래스: Person 클래스를 상속하며 학생 정보를 몇 가지 추가하여 가지고 있음

Worker 클래스: Person 클래스를 상속하며 회사원 정보를 몇 가지 추가하여 가지고 있음

Inheritance클래스: Student, Worker 클래스를 테스트하기 위한 다양한 함수들을 가지고 있음

/******************************************************************************
 * 문제: 1-1
 * 요점: 클래스 상속, 수퍼 클래스 초기화
 ******************************************************************************/
// 1) Student 클래스의 "// TODO:"의 주석을 참고하여 코드를 완성하라.
// 2) Student 클래스의 주석을 모두 해제하고 생성자를 완성하라. 이때 호출되는
//    set(), printMembers() 멤버 함수도 구현하라. (Person의 함수들을 참고하라.)
//-----------------------------------------------------------------------------

===============================================================================
==  프로그램 실행 결과 1-1
=============================================================================== 

******* Main Menu ********
* 0.exit 1.PersonManager *
* 2.ch2 3.ch3 4.ch5      *
**************************
menu item? 4
Person(): s1 1 65.4 true :Jongno-gu Seoul:
Student(): Physics 3.8 1

***** Inheritance Menu ...
menu item? 


/******************************************************************************
 * 문제: 1-1-1
 * 요점: 기존 Person 클래스 수정
 ******************************************************************************/
// 1) Person 클래스의 assign() 멤버 함수의 위치를 
//    "// Candidates for virtual functions and overriding" 뒤에 배치하라.
// 2) Person 클래스에 아래의 복사 생성자 함수를 삽입하라.
//    이는 초기화 되는 현 객체의 멤버들을 p 객체의 멤버 값으로 모두 초기화한다.
//-----------------------------------------------------------------------------
    public Person(Person p) { // 복사 생성자
        assign(p); 
        System.out.print("Person(p): ");  printMembers();  System.out.println();
    }
//-----------------------------------------------------------------------------
// 3) Person 클래스의 clone() 멤버 함수를 아래와 같이 수정하라. 
//    이는 새로 생성된 객체를 현재 객체의 내용을 복사해서 초기화한다.
//-----------------------------------------------------------------------------
    public Person clone() { 
        System.out.println("Person::clone()");
        return new Person(this); 
    } 


/******************************************************************************
 * 문제: 1-2
 * 요점: 복사생성자
 ******************************************************************************/
// 1) Inheritance::student() 멤버 함수에 아래 코드를 추가하라.
//    아래 코드는 매개변수인 기존 Student 객체의 내용을 복사해서 새로운 Student 객체를 생성하는 것이다.
//-----------------------------------------------------------------------------
        var s1 = new Student(s);
        var s2 = new Student(s1);
//-----------------------------------------------------------------------------
// 2) 위 코드가 가능하게 Student 클래스에 복사생성자를 추가하라.
//    복사생성자 구현시 먼저 슈퍼 클래스의 복사생성자를 호출한 후 (assign()을 호출하지 말고)
//    Student::set() 함수를 호출하여 나머지 Student 멤버들의 값을 설정해야 한다. 
//    그런 후 현재 멤버들을 출력해야 한다. (현재 멤버 출력은 기존 Student 생성자를 참조할 것)

===============================================================================
==  프로그램 실행 결과 1-2
=============================================================================== 

******* Main Menu ...
menu item? 4
Person(): s1 1 65.4 true :Jongno-gu Seoul:
Student(): Physics 3.8 1

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 1
Person(p): s1 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 3.8 1
Person(p): s1 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 3.8 1

...

/******************************************************************************
 * 문제: 1-3
 * 요점: equals 함수 오버라이딩
 ******************************************************************************/
// 1) Inheritance::student() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//    아래 코드는 기존에 이미 추가되어 있는 Inheritance::compare()를 호출한 것이다.
//-----------------------------------------------------------------------------
        System.out.println("--------------------");
        s2.set("s2");
        compare(s1, s2); // 업캐스팅
//-----------------------------------------------------------------------------
// 2) 위 compare()는 아래의 Person::println()을 호출하는데 
        p1.println("p1: ");
//    실제 실행 결과를 보면 Student 객체의 멤버들까지 모두 출력되었다.
//    이것이 가능하도록 Student 클래스에 print() 멤버함수를 오버라이딩하여 재 구현하라.
//    주의: println() 멤버함수를 재구현하지 마라. 이유는 println()이 print()를 호출하는데
//         Student에 print()를 오버라이딩하여 구현해 놓으면 Person의 println()이 
//         자동으로 오버라이딩된 Student::print()를 호출하기 때문이다.
//-----------------------------------------------------------------------------
//    Student::print() 함수 선언 윗줄에 "@Override" 행을 삽입하여 print()가 슈퍼클래스인
//    Person의 print() 함수를 오버라딩한다는 것을 컴파일러에게 명확히 알려 주기 바란다.
//    앞으로 오버라이딩하는 모든 함수 앞줄에는 항상 "@Override" 행을 삽입하라.
//    Student::print() 구현시 슈퍼클래스의 print()를 호출하여 슈퍼클래스 멤버를 먼저 출력하고
//    printMembers()를 호출하여 Student 클래스 멤버들을 출력하면 된다.
//-----------------------------------------------------------------------------
// 3) 위 compare()는 또한 아래의 equals()를 호출하는데 이는 Person의 equals()를 호출한다.
        System.out.println("p1.equals(p2) : " + p1.equals(p2) + "\n");
//    위 equals()는 Person 객체의 내용을 비교한다. 그런데 위 코드를 가지고도 원래 객체인 Student 
//    객체의 내용을 서로 비교할 수 있도록 Student 클래스에 Person::equals() 함수를 오버라이딩하라.
//    함수 선언 및 매개변수의 다운 캐스팅은 아래와 같이 하라. 
    public boolean equals(Person p) {
        Student s = (Student)p;
        return 하나의 조건문;
    }
//    Student::equals()는 비교하는 두 객체의 수퍼 클래스 객체가 먼저 같고(equals()) 그리고
//    학년과 학과가 같으면 true를 반환하고 아니면 false를 반환하도록 하라. 
//    함수 위치는 "// Overriding" 뒤쪽에 배치하라.

===============================================================================
==  프로그램 실행 결과 1-3
=============================================================================== 
... // 위 "프로그램 실행 결과 1-2"와 동일
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s2 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p1.equals(p2) : false
--------------------


/******************************************************************************
 * 문제: 1-4
 * 요점: getter and setter 멤버 함수
 ******************************************************************************/
// 1) Inheritance::student() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        s2.set(s1.getName());
        s2.setGPA(s2.getGPA()-1.0);
        compare(s1, s2);

        s2.setDepartment(s1.getDepartment()+"-Electronics");
        compare(s1, s2);

        s2.setDepartment(s1.getDepartment());
        s2.setYear(s1.getYear()+1);
        compare(s1, s2);

        s2.setYear(s1.getYear());
        compare(s1, s2);
//-----------------------------------------------------------------------------
// 2) 위 코드가 정상 작동할 수 있도록 Student 클래스 내에 적절한 멤버 함수들을 구현하라.
//    함수들의 위치는 "// getter and setter" 뒤에 배치하라.

===============================================================================
==  프로그램 실행 결과 1-4
=============================================================================== 
...

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 1
Person(p): s1 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 3.8 1
Person(p): s1 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 3.8 1
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s2 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p1.equals(p2) : false
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
p1.equals(p2) : true
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics-Electronics 2.8 1
p1.equals(p2) : false
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics 2.8 2
p1.equals(p2) : false
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
p1.equals(p2) : true
--------------------


/******************************************************************************
 * 문제: 1-5
 * 요점: 함수 오버라이딩
 ******************************************************************************/
// 1) Inheritance::student() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//    아래의 whatAreYouDoing(Person p)는 Person의 p.whatAreYouDoing()을 호출하지만
//    p의 실제 객체인 s2에 whatAreYouDoing()이 오버라이딩되어 있으면 Student의
//    whatAreYouDoing()이 호출된다.
//-----------------------------------------------------------------------------
        s2.set("s2");
        Student s3 = (Student)whatAreYouDoing(s2); // 함수호출:다운캐스팅 & 리턴:업캐스팅
        System.out.println();
        s3.whatAreYouDoing();
//-----------------------------------------------------------------------------
// 2) Student::study(), takeClass() 내의 주석을 해제하라.
// 3) 아래 실행 결과를 참고하여 위 코드가 정상 작동할 수 있도록 
//    Student 클래스 내에 적절한 멤버 함수들을 구현하라.
//    이 함수 구현 시 아래 문장을 복사하여 삽입하고 study(), takeClass() 함수를 활용하시오.
//-----------------------------------------------------------------------------
        System.out.println("~~~~~~~~~~~~~~~~ Student::whatAreYouDoing() ~~~~~~~~~~~~~~~~");
        System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

===============================================================================
==  프로그램 실행 결과 1-5
=============================================================================== 
... // 위 "프로그램 실행 결과 1-4"와 동일
~~~~~~~~~~~~~~~~ Student::whatAreYouDoing() ~~~~~~~~~~~~~~~~
s2 is studying as a 1-year student in Physics
s2 took several courses and got GPA 2.8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~ Student::whatAreYouDoing() ~~~~~~~~~~~~~~~~
s2 is studying as a 1-year student in Physics
s2 took several courses and got GPA 2.8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


/******************************************************************************
 * 문제: 1-6
 * 요점: 함수 오버라이딩: clone()
 ******************************************************************************/
// 1) Inheritance::student()의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        s3 = (Student)clone(s2);
        s3.println("s3: ");
        System.out.println("--------------------");
//-----------------------------------------------------------------------------
// 2) Inheritance::student() 앞쪽에 아래 함수를 삽입하라.
//    이 함수는 Person의 p.clone() 호출하여 원본 객체(s2)를 복사하여 새로운 객체를 생성하는데
//    p의 실제 객체인 s2에 clone()이 오버라이딩되어 있으면 오버라딩된 함수가 호출된다.
//-----------------------------------------------------------------------------
    Person clone(Person p) {
        Person c = p.clone();
        return c;
    }
//-----------------------------------------------------------------------------
// 3) 아래 실행결과와 Person::clone()을 참고하여 Student::clone()을 구현하라. 이 함수는 
//    Person의 동일한 함수를 오버라이딩하는 것이므로 리턴 데이타 타입을 Person으롤 해야 한다.

===============================================================================
==  프로그램 실행 결과 1-6
=============================================================================== 
... // 위 "프로그램 실행 결과 1-5"와 동일
Student::clone()
Person(p): s2 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 2.8 1
s3: s2 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
--------------------


/******************************************************************************
 * 문제: 1-7
 * 요점: 함수 오버라이딩: assign()
 ******************************************************************************/
// 1) Inheritance::student()의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        s2.println("s2: ");
        s1 = new Student("", 0, 0.0, false, "", "", 0.0, 0);
        assign(s2, s1); // (destination, source): destination = source
        s2.println("s2: ");
        System.out.println("--------------------");
//-----------------------------------------------------------------------------
// 2) Inheritance::student() 앞쪽에 아래 함수를 삽입하라.
//    이 함수는 Person의 d.assign() 호출하여 원본 객체 s(s1)를 d(s2)에 복사하는데
//    d의 실제 객체인 s2에 assign()이 오버라이딩되어 있으면 오버라딩된 함수가 호출된다.
//-----------------------------------------------------------------------------
    void assign(Person d, Person s) {
        d.assign(s); // s를 d에 복사
    }
//-----------------------------------------------------------------------------
// 3) 아래 실행결과와 Person::assign()을 참고하여 Student::assign()을 구현하라. 이 함수는 
//    Person의 동일한 함수를 오버라이딩하는 것이므로 매개변수 타입을 Person p로 해야 한다.
//    함수 내에서 equals() 처럼 Student s = (Student)p;해서 사용해야 한다.
//    구현 시 슈퍼 클래스의 assign()을 호출하여 먼저 슈퍼 클래스를 복사한 후
//    Student::set()을 호출하여 s의 Student의 멤버들을 복사해야 한다.

===============================================================================
==  프로그램 실행 결과 1-7
=============================================================================== 
... // 위 "프로그램 실행 결과 1-6"와 동일
s2: s2 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
Person():  0 0.0 false ::
Student():  0.0 0
s2:  0 0.0 false ::  0.0 0
--------------------


/******************************************************************************
 * 문제: 1-8
 * 요점: 함수 오버라이딩: 스캐너로부터 바로 멤버들 입력 받기
 ******************************************************************************/
// 1) Inheritance::student() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//    아래의 Inheritance::input()은 Person의 p.input(UI.scan)을 호출하지만 
//    p의 실제 객체인 s2에 input(sc)이 오버라이딩되어 있으면 오버라딩된 함수가 호출된다.
//-----------------------------------------------------------------------------
        input(s2, "student"); // s2 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
        s2.println("s2: ");
        System.out.println("--------------------");
//-----------------------------------------------------------------------------
// 2) Person의 input(sc)을 참고하여 Student에도 이를 구현하라.
//    이 함수 구현 시 슈퍼 클래스의 input(sc)을 호출하여 부모 클래스의 멤버들을 모두 
//    입력받은 후 Student::inputMembers(sc)를 호출하여 Student 클래스의 멤버들을 입력 받아라.
// 3) Person::inputMembers(sc)를 참고하여 Student 클래스에도 이를 구현하라.
//    구현 시 학과, GPA, 학년만 입력 받으면 된다. 참고로 이 함수들은 private 접근 지정자를 가지므로
//    부모 클래스의 동일한 함수를 오버라이딩하는 것은 아니다.

===============================================================================
==  프로그램 실행 결과 1-8
=============================================================================== 
... // 위 "프로그램 실행 결과 1-7"와 동일
input student: s2 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
s2: s2 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
--------------------


/******************************************************************************
 * 문제: 1-9
 * 요점: 스캐너로부터 바로 멤버들을 입력 받는 생성자
 ******************************************************************************/
// 1) Inheritance::student()의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        Student s4 = (Student)newInput(true, "student"); 
        // s4 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
        s4.println("s4: ");
//-----------------------------------------------------------------------------
// 2) Inheritance::student() 앞쪽에 아래 함수를 삽입하라.
//    이 함수는 새로운 Student 객체를 생성하면서 바로 스캐너로부터 객체 멤버들의 값을 입력 받아
//    객체를 초기화한다.
//-----------------------------------------------------------------------------
    Person newInput(Boolean isStudent, String msg) {
        Person p = null;
        System.out.print("input new "+msg+": ");
        if (isStudent)
            p = new Student(UI.scan);
        //else
        //    p = new Worker(UI.scan);
        if (UI.echo_input) p.println(); // 자동체크에서 사용됨
        return p;
    }
//-----------------------------------------------------------------------------
// 3) Person의 Person(Scanner sc)을 참고하여 
//    Student에도 스캐너로부터 객체 멤버들의 값을 입력 받아 초기화하는 생성자를 구현하라.
//    이 함수 구현 시 슈퍼 클래스의 상응하는 Person(sc) 호출하여 부모 클래스의 멤버들을 모두 
//    입력받은 후 Student::inputMembers(sc)를 호출하여 Student 클래스의 멤버들을 입력 받아라.

===============================================================================
==  프로그램 실행 결과 1-9
=============================================================================== 
... // 위 "프로그램 실행 결과 1-7"와 동일
input new student: s4 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
s4: s4 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1


===============================================================================
==  프로그램 실행 결과 1-10
==  지금까지의 실행 결과
=============================================================================== 

******* Main Menu ********
* 0.exit 1.PersonManager *
* 2.ch2 3.ch3 4.ch5      *
**************************
menu item? 4
Person(): s1 1 65.4 true :Jongno-gu Seoul:
Student(): Physics 3.8 1
Person(): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(): Samsung Director

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 1
Person(p): s1 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 3.8 1
Person(p): s1 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 3.8 1
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s2 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p1.equals(p2) : false
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
p1.equals(p2) : true
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics-Electronics 2.8 1
p1.equals(p2) : false
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics 2.8 2
p1.equals(p2) : false
--------------------
p1: s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
p2: s1 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
p1.equals(p2) : true
--------------------
~~~~~~~~~~~~~~~~ Student::whatAreYouDoing() ~~~~~~~~~~~~~~~~
s2 is studying as a 1-year student in Physics
s2 took several courses and got GPA 2.8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~ Student::whatAreYouDoing() ~~~~~~~~~~~~~~~~
s2 is studying as a 1-year student in Physics
s2 took several courses and got GPA 2.8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Student::clone()
Person(p): s2 1 65.4 true :Jongno-gu Seoul:
Student(s): Physics 2.8 1
s3: s2 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
--------------------
s2: s2 1 65.4 true :Jongno-gu Seoul: Physics 2.8 1
Person():  0 0.0 false ::
Student():  0.0 0
s2:  0 0.0 false ::  0.0 0
--------------------
input student: s2 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
s2: s2 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
--------------------
input new student: s4 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1
s4: s4 1 56.9 false :Gangnam-gu Seoul: Physics 2.0 1

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 

/******************************************************************************
 * 문제: 2-1
 * 요점: 클래스 상속, 수퍼 클래스 초기화
 ******************************************************************************/
// 1) Worker 클래스의 "// TODO:"의 주석을 참고하여 코드를 완성하라.
// 2) Worker 클래스의 주석을 모두 해제하고 생성자를 완성하라. 이때 호출되는
//    set(), printMembers() 멤버 함수도 구현하라. (Student의 함수들을 참고하라.)
//-----------------------------------------------------------------------------

===============================================================================
==  프로그램 실행 결과 2-1
=============================================================================== 

******* Main Menu ********
* 0.exit 1.PersonManager *
* 2.ch2 3.ch3 4.ch5      *
**************************
menu item? 4
Person(): s1 1 65.4 true :Jongno-gu Seoul:
Student(): Physics 3.8 1
Person(): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(): Samsung Director

***** Inheritance Menu ...


/******************************************************************************
 * 문제: 2-2
 * 요점: 복사생성자
 ******************************************************************************/
// 1) Inheritance::worker() 멤버 함수에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        var w1 = new Worker(w);
        var w2 = new Worker(w1);
//-----------------------------------------------------------------------------
// 2) 위 코드가 가능하게 Worker 클래스에 복사생성자를 추가하라.

===============================================================================
==  프로그램 실행 결과 2-2
=============================================================================== 
... // 위 "프로그램 실행 결과 2-2"와 동일

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 2
Person(p): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
Person(p): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director

...

/******************************************************************************
 * 문제: 2-3
 * 요점: equals 함수 오버라이딩
 ******************************************************************************/
// 1) Inheritance::worker() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        System.out.println("--------------------");
        w2.set("w2");
        compare(w1, w2); // 업캐스팅
//-----------------------------------------------------------------------------
// 2) Student 클래스의 해당 함수와 아래 출력결과를 참고하여 Worker 클래스에 적절한 함수를 구현하라.
//    즉, print(), equals()
//    Worker::equals()는 비교하는 두 객체의 수퍼 클래스 객체가 먼저 같고(equals()) 그리고
//    회사명과 직급이 같으면 같은 Work 객체라고 가정한다. 

===============================================================================
==  프로그램 실행 결과 2-3
=============================================================================== 
... // 위 "프로그램 실행 결과 2-2"와 동일
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p1.equals(p2) : false
--------------------


/******************************************************************************
 * 문제: 2-4
 * 요점: getter and setter 멤버 함수
 ******************************************************************************/
// 1) Inheritance::worker() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        w2.set(w1.getName());
        w2.setCompany(w1.getCompany()+"-Hyundai");
        w2.setPosition(w1.getPosition());
        compare(w1, w2);
        w2.setCompany(w1.getCompany());
        w2.setPosition(w1.getPosition()+"-Manager");
        compare(w1, w2);
        w2.setPosition(w1.getPosition());
        compare(w1, w2);
//-----------------------------------------------------------------------------
// 2) 위 코드가 정상 작동할 수 있도록 Worker 클래스 내에 적절한 멤버 함수들을 구현하라.

===============================================================================
==  프로그램 실행 결과 2-4
=============================================================================== 
...

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 2
Person(p): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
Person(p): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p1.equals(p2) : false
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w1 3 33.3 false :Kangnam-gu Seoul: Samsung-Hyundai Director
p1.equals(p2) : false
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director-Manager
p1.equals(p2) : false
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p1.equals(p2) : true
--------------------


/******************************************************************************
 * 문제: 2-5
 * 요점: 함수 오버라이딩
 ******************************************************************************/
// 1) Inheritance::worker() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        w2.set("w2");
        Worker w3 = (Worker)whatAreYouDoing(w2);  // 다운캐스팅
        System.out.println();
        w3.whatAreYouDoing();
//-----------------------------------------------------------------------------
// 2) 아래 실행 결과를 참고하여 위 코드가 정상 작동할 수 있도록 
//    Worker 클래스 내에 적절한 멤버 함수들을 구현하라.
//    이 함수 구현 시 아래 문장을 복사하여 삽입하고 work(), goOnVacation() 함수를 활용하시오.
//-----------------------------------------------------------------------------
        System.out.println("!!!!!!!!!!!!!!!! Worker::whatAreYouDoing()!!!!!!!!!!!!!!!!!");
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

===============================================================================
==  프로그램 실행 결과 2-5
=============================================================================== 
... // 위 "프로그램 실행 결과 2-4"와 동일
!!!!!!!!!!!!!!!! Worker::whatAreYouDoing()!!!!!!!!!!!!!!!!!
w2 works in Samsung as Director
w2 is now enjoying his(her) vacation.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!! Worker::whatAreYouDoing()!!!!!!!!!!!!!!!!!
w2 works in Samsung as Director
w2 is now enjoying his(her) vacation.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


/******************************************************************************
 * 문제: 2-6
 * 요점: 함수 오버라이딩: clone()
 ******************************************************************************/
// 1) Inheritance::worker()의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        w3 = (Worker)clone(w2);
        w3.println("w3: ");
        System.out.println("--------------------");
//-----------------------------------------------------------------------------
// 2) 아래 실행결과와 Student::clone()을 참고하여 Worker::clone()을 구현하라. 

===============================================================================
==  프로그램 실행 결과 2-6
=============================================================================== 
... // 위 "프로그램 실행 결과 2-5"와 동일
Worker::clone()
Person(p): w2 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
w3: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
--------------------


/******************************************************************************
 * 문제: 2-7
 * 요점: 함수 오버라이딩: assign()
 ******************************************************************************/
// 1) Inheritance::worker()의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        w2.println("w2: ");
        w1 = new Worker("", 0, 0.0, false, "", "", "");
        assign(w2, w1); // (destination, source): destination = source
        w2.println("w2: ");
        System.out.println("--------------------");
//-----------------------------------------------------------------------------
// 2) 아래 실행결과와 Student::assign()을 참고하여 Worker::assign()을 구현하라. 

===============================================================================
==  프로그램 실행 결과 2-7
=============================================================================== 
... // 위 "프로그램 실행 결과 2-6"와 동일
w2: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
Person():  0 0.0 false ::
Worker():  
w2:  0 0.0 false ::  
--------------------


/******************************************************************************
 * 문제: 2-8
 * 요점: 함수 오버라이딩: 스캐너로부터 바로 멤버들 입력 받기
 ******************************************************************************/
// 1) Inheritance::worker() 멤버 함수의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        input(w2, "worker"); // w2 3 44.4 true :Jongno-gu Seoul: Samsung Director
        w2.println("w2: ");
        System.out.println("--------------------");
//-----------------------------------------------------------------------------
// 2) 아래 실행결과와 Student 클래스를 참고하여 Worker 클래스에 적절한 멤버 함수들을 구현하라.

===============================================================================
==  프로그램 실행 결과 2-8
=============================================================================== 
... // 위 "프로그램 실행 결과 2-7"와 동일
input worker: w2 3 44.4 true :Jongno-gu Seoul: Samsung Director
w2: w2 3 44.4 true :Jongno-gu Seoul: Samsung Director
--------------------


/******************************************************************************
 * 문제: 2-9
 * 요점: 스캐너로부터 바로 멤버들을 입력 받는 생성자
 ******************************************************************************/
// 1) Inheritance::worker()의 맨 뒤에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------
        Worker w4 = (Worker)newInput(false, "worker"); 
        // w4 3 44.4 true :Jongno-gu Seoul: Samsung Director
        w4.println("w4: ");
//-----------------------------------------------------------------------------
// 2) Inheritance::newInput()의 아래 주석을 해제하라.
//-----------------------------------------------------------------------------
        //else
        //    p = new Worker(UI.scan);
//-----------------------------------------------------------------------------
// 3) Worker 클래스에도 스캐너로부터 객체 멤버들의 값을 직접 입력 받아 초기화하는 생성자를 구현하라.

===============================================================================
==  프로그램 실행 결과 2-9
=============================================================================== 
... // 위 "프로그램 실행 결과 2-8"와 동일
input new worker: w4 3 44.4 true :Jongno-gu Seoul: Samsung Director
w4: w4 3 44.4 true :Jongno-gu Seoul: Samsung Director


===============================================================================
==  프로그램 실행 결과 2-10
==  지금까지의 실행 결과
=============================================================================== 
******* Main Menu ********
* 0.exit 1.PersonManager *
* 2.ch2 3.ch3 4.ch5      *
**************************
menu item? 4
Person(): s1 1 65.4 true :Jongno-gu Seoul:
Student(): Physics 3.8 1
Person(): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(): Samsung Director

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 2
Person(p): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
Person(p): w1 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p1.equals(p2) : false
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w1 3 33.3 false :Kangnam-gu Seoul: Samsung-Hyundai Director
p1.equals(p2) : false
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director-Manager
p1.equals(p2) : false
--------------------
p1: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p2: w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
p1.equals(p2) : true
--------------------
!!!!!!!!!!!!!!!! Worker::whatAreYouDoing()!!!!!!!!!!!!!!!!!
w2 works in Samsung as Director
w2 is now enjoying his(her) vacation.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!! Worker::whatAreYouDoing()!!!!!!!!!!!!!!!!!
w2 works in Samsung as Director
w2 is now enjoying his(her) vacation.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Worker::clone()
Person(p): w2 3 33.3 false :Kangnam-gu Seoul:
Worker(w): Samsung Director
w3: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
--------------------
w2: w2 3 33.3 false :Kangnam-gu Seoul: Samsung Director
Person():  0 0.0 false ::
Worker():  
w2:  0 0.0 false ::  
--------------------
input worker: w2 3 44.4 true :Jongno-gu Seoul: Samsung Director
w2: w2 3 44.4 true :Jongno-gu Seoul: Samsung Director
--------------------
input new worker: w4 3 44.4 true :Jongno-gu Seoul: Samsung Director
w4: w4 3 44.4 true :Jongno-gu Seoul: Samsung Director

***** Inheritance Menu ******
* 0.exit 1.Student 2.Worker *
*****************************
menu item? 



/******************************************************************************
 * 프로그램의 자동오류체크 방법
 ******************************************************************************/
// clc.chosun.ac.kr의 [강의자료실]의 "자동_오류_체크_방법" 파일을 참고하기 바란다.

// Main.java의 main() 함수 내에서 아래 문장의 [주석]을 제거하고 실행하면 자동오류체크가 실행된다.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else

/******************************************************************************
 * 자동오류체크 실행결과
 ******************************************************************************/
test_1 : O
test_2 : O
Good bye!!

/******************************************************************************
 * 프로그램 제출
 ******************************************************************************/
// 1. 중요: Main.java의 main() 함수 내에서 아래 문장처럼 [주석] 처리한 후 저장하라.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else
//    경고: 위 문장을 주석처리 하지 않은 채 제출할 경우 oj 시스템에서 컴파일 에러가 발생할 것이다. 
// 2. 프로그램 소스인 Main.java만을 oj.chosun.ac.kr에 제출하라. 
//    제출 시 AutoCheck.java 파일은 제출하지 않아도 된다.
//-----------------------------------------------------------------------------
