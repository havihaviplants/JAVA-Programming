[7장 문제-3]

수정: 11.14 18:30
     [문제 1]과 [코드추가 3]에서 //new CollectionsByList(pVector).run()
     문장의 주석 처리 관련 설명 추가하였음 

//----------------------------------------------------------------------------
// 아래 문제를 해결하는 도중 출력이 잘못되었거나 문제 설명과 출력이 일치하지 않거나 오타가 있거나 등등
// 조금이라도 문제에 이상한 것이 있으면 주저하지 말고 jhshim@chosun.ac.kr로 알려 주시기 바랍니다.
//----------------------------------------------------------------------------

/******************************************************************************
 * 프로젝트 및 소스파일 생성
 ******************************************************************************/
// 1) 이클립스에서 CH7-3 프로젝트를 만들어라. 
// 2) 기존 CH7-2 프로젝트에서 소스파일들을 모두 복사하라.
//    즉, 기존 소스 파일들을 모두 선택한 후 CH7-3/src/(default package) 위로 드래깅한 후 
//    Ctrl를 누른채 드랍한다.
// 3) clc의 [강의자료실]에서 CH7-3 과제와 관련된 자동오류체크를 위한 파일들을 다운받는다
//    만약 test 폴더 밑에 또 test 폴더가 있다면(즉, test/test) 안쪽 test 폴더를 사용하라. 


/******************************************************************************
 * [코드 추가 1]
 ******************************************************************************/
// 1) 프로그램의 맨 앞쪽 주석 부분의 "Author: " 행 다음의 내용을 아래 내용으로 교체하라.
//----------------------------------------------------------------------------

//  + MainMenu: 메뉴항목 5.MyVectorTest 추가
//  + 기존의 VectorPerson 클래스를 제네릭 클래스 MyVector로 일반화
//  + MyVectorTest 클래스 추가
//  + Memo:memoData 및 menuStr 수정
//  + Memo:메뉴 항목 추가 및 함수(비어 있는) 추가


/******************************************************************************
 * 코드 추가 2
 ******************************************************************************/
// 1) MainMenu::run()에 메뉴 문자열을 아래처럼 변경하고, MENU_COUNT도 수정하라.
//-----------------------------------------------------------------------------
        String menuStr =  // 7_3 수정
            "************* Main Menu **************\n" +
            "* 0.exit 1.PersonManager 2.ch2 3.ch3 *\n" +
            "* 4.ch5 5.PMbyMap 6.MyVectorTest     *\n" +
            "**************************************\n";
//-----------------------------------------------------------------------------
// 2) MainMenu::run()에 switch 문장에 아래 case 문장을 추가하라.
//-----------------------------------------------------------------------------
            case 6: /*new MyVectorTest().run();*/ break; // 7_3


/******************************************************************************
 * 문제: 1
 * 요점: VectorPerson 클래스를 제네릭 클래스로 일반화
 ******************************************************************************/
// 기존의 VectorPerson 클래스의 위치를 CollectionsByHashMap 클래스 뒤로 옮겨라.
// 1) VectorPerson 클래스를 아래와 같이 클래스 이름을 MyVector로 변경하고 제네릭 클래스로 만들어라.
//-----------------------------------------------------------------------------
class MyVector  // ch7_3
{
}   // MyVector class: ch7_3
//-----------------------------------------------------------------------------
//    i) 클래스 내의 멤버 함수들의 매개변수 및 리턴 타입이 Person인 경우 모두 E로 변경하라.
//    ii) Person persons[]와 같은 배열은 모두 Object 배열로 변경하라. 교제 예제 7-9 참고
//        E 형의 배열은 생성할 수 없으므로 배열 객체를 생성할 때도 Object 배열을 생성해야 한다.
//    iii) persons[]은 Object 타입이므로 리턴 타입이 E 인 함수들은 객체를 return 할 때 
//         Object 타입에서 E 타입으로 타입 변경해서 리턴해야 한다.
//    iv) 리턴 타입이 E 인 각 함수의 앞 줄에 아래 문장을 추가한다. 
//        이는 경고 메시지가 나오지 않게 하기 위함이다. 
//-----------------------------------------------------------------------------
    @SuppressWarnings("unchecked")
//-----------------------------------------------------------------------------
// 2) 이제 MyVector를 테스트하기 위해 PersonManager 클래스를 수정하자.
//    i) 멤버 중 private Vector< Person > pVector를 주석 처리하고 그 밑에 다음을 추가하라.
//-----------------------------------------------------------------------------
    private MyVector pVector;
//-----------------------------------------------------------------------------
//    ii) 생성자 내의 pVector = new Vector< Person >()도 주석 처리하고 그 밑에 다음을 추가하라.
//-----------------------------------------------------------------------------
        pVector = new MyVector< Person >();
//-----------------------------------------------------------------------------
//    iii) collections() 함수 내의 아래 문장을 주석처리하라.
//-----------------------------------------------------------------------------
        //new CollectionsByList(pVector).run();
//-----------------------------------------------------------------------------

===============================================================================
==  문제 1 실행 결과
===============================================================================

************* Main Menu **************
* 0.exit 1.PersonManager 2.ch2 3.ch3 *
* 4.ch5 5.PMbyMap 6.MyVectorTest     *
**************************************
menu item? 1
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

=================== Person Management Menu ... 4.remove ...
menu item? 4
index to delete? 0
[0] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[1] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[2] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[3] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[4] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

=================== Person Management Menu ... 6.append ...
menu item? 6
number of persons to append? 1
input 1 [delimiter(P,S,or W)] [person information] to append:
    K p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:
K: WRONG delimiter
    P p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:
[0] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[1] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[2] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[3] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[4] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[5] p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:

=================== Person Management Menu ... 7.insert ...
menu item? 7
index to insert in front? 0
input [delimiter(P,S,or W)] [person information] to insert:
    S s4 15 80 true :1001, Jungang-daero, Yeonje-gu, Busan: Biology 3.8 3
[0] s4 15 80.0 true :1001, Jungang-daero, Yeonje-gu, Busan: Biology 3.8 3
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[6] p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:

=================== Person Management Menu ... 2.clear ...
menu item? 2

=================== Person Management Menu ... 3.reset ...
menu item? 3
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager


/******************************************************************************
 * 코드 추가 3
 ******************************************************************************/
// 위 문제 1이 정상적으로 수행하였다면 
// 1) PersonManager 클래스 멤버 중 MyVector pVector 선언 및 생성 문장을 주석 처리하라.
// 2) 기존의 주석 처리된 Vector< Person > pVector 선언 및 생성 문장의 주석을 다시 풀어라.
// 3) collections() 함수 내의 주석처리된 문장의 주석을 풀어라.
//-----------------------------------------------------------------------------
// 이러면 PersonManager 클래스는 Vector를 이용하여 Person 객체들을 관리하게 된다.
// 참고로 PMbyMap 클래스는 HashMap 또는 TreeMap을 이용하여 Person 객체들을 관리한다.
//-----------------------------------------------------------------------------

/******************************************************************************
 * 코드 추가 4
 ******************************************************************************/
// 1) 아래 MyVectorTest 클래스를 MyVector 클래스 뒤에 배치하라.
// MyVectorTest는 MyVector를 다양하게 활용하는 클래스이다.
// 이 클래스는 Person 클래스의 5개의 주요 멤버들을 각각의 벡터에 저장하여 여러 사람 정보를 
// 저장하고 있다. 또한 BaseManager를 상속하여 추상 멤버 함수들을 모두 구현하였다.
//-----------------------------------------------------------------------------
class MyVectorTest extends BaseManager // ch7_3
{
    private MyVector< String >  nameVct;    // Person::name 멤버들을 저장하는 벡터
    private MyVector< Integer > idVct;      // Person::id 멤버들을 저장하는 벡터
    private MyVector< Double >  weightVct;  // Person::weight 멤버들을 저장하는 벡터
    private MyVector< Boolean > marriedVct; // Person::married 멤버들을 저장하는 벡터
    private MyVector< String >  addressVct; // Person::address 멤버들을 저장하는 벡터

    public MyVectorTest() {
        // ToDo: MyVector< >의 기본 생성자를 이용하여 5개의 멤버 벡터들을 생성하라.
        
        // 아래 add()는 각 벡터에 ADD_SIZE개의 원소를 자동 삽입함
        add();  // BaseManager의 멤버 함수임; 이 함수는 다시 아래의 addElements()를 호출함
    }
    public void displayPerson(int i) { // 한 사람의 정보를 출력함 
        System.out.println("[" + i + "] " + nameVct.get(i)+" "+idVct.get(i)+
        " "+weightVct.get(i)+" "+marriedVct.get(i)+" :"+addressVct.get(i)+":");
    }
    public void display() { // Menu item 1: 모든 사람들의 정보를 출력함
        for (int i = 0, count = idVct.size(); i < count; ++i)
            displayPerson(i);
    }
    public void replace() { // Menu item 4
        // 각 벡터의 총 원소 중 초반의 REPLACE_SIZE개의 사람 정보를 모두 수정함
        int count = Math.min(REPLACE_SIZE, idVct.size());
        for (int i = 0; i < count; ++i) {
            nameVct.set(i, getNewName());
            idVct.set(i, getNewId());
            weightVct.set(i, getNewWeight());
            marriedVct.set(i, getNewMarried(idVct.get(i)));
            addressVct.set(i, getNewAddress());
        }
        display();
    }
    public void remove() { // Menu item 5
        if (idVct.size() == 0) {
            System.out.println("no entry to remove");
            return;
        }
        int index = UI.getIndex("index to delete? ", idVct.size());
        // ToDo: 5개의 각각의 멤버 벡터에 대해 index 항목을 삭제하라.
        display();
    }
    public void find() { // Menu item 6
        String name = UI.getNext("name to find? ");
        // ToDo: for를 이용하여 nameVct에서 입력 받은 name 같은 이름을 찾아서
        //       찾은 경우 그 사람의 정보를 출력하라.
        //       찾지 못한 경우 아래를 출력하라.
        System.out.println(name + ": NOT found");
    }
    public void collections() { // Menu item 7
        System.out.println("not supported by MyVector");
    }
    public void clearAllElements() {  // BaseManager::clear()에 의해 호출됨
        // ToDo: 5개의 각각의 멤버 벡터에 대해 모든 원소들을 삭제하라.
    }
    public void addElements() {   // BaseManager::add()에 의해 호출됨
        // ADD_SIZE개의 Person 정보를 자동 생성하여 별개의 벡터에 보관함
        for (int i = 0; i < ADD_SIZE; ++i) {
            // 각각의 벡터의 끝에 자동 생성된 Person 멤버들을 추가한다.
            int id = getNewId();
            nameVct.add(getNewName()); 
            idVct.add(id); 
            weightVct.add(getNewWeight()); 
            marriedVct.add(getNewMarried(id)); 
            addressVct.add(getNewAddress()); 
        }
    }
}   // ch7_3: MyVectorTest class
//-----------------------------------------------------------------------------


/******************************************************************************
 * 문제: 2
 * 요점: MyVector 클래스 활용하기
 ******************************************************************************/
// 1) MyVectorTest 내의 ToDo 부분을 참고하여 코드를 완성하라.
// 2) MainMenu::run() 내의 switch 문장 case 6의 주석을 해제하라.
//-----------------------------------------------------------------------------

===============================================================================
==  문제 2 실행 결과
===============================================================================

************* Main Menu **************
* 0.exit 1.PersonManager 2.ch2 3.ch3 *
* 4.ch5 5.PMbyMap 6.MyVectorTest     *
**************************************
menu item? 6
[0] Yang10 1360 54.4 false :Incheon Dong-gu:
[1] Leem11 1491 75.8 true :Busan Buk-gu:
[2] Park12 1473 99.0 true :Daejeon Jung-gu:
[3] Kimm13 1241 56.4 true :Daejeon Buk-gu:
[4] Kimm14 1652 41.3 false :Gwangju Dong-gu:
[5] Shim15 1745 46.2 true :Incheon Buk-gu:
[6] Johh16 1125 86.5 true :Seoul Jung-gu:
[7] Baek17 1555 84.7 true :Daegu Nam-gu:
[8] Park18 1112 90.3 false :Ulsan Nam-gu:
[9] Nahh19 1207 48.0 true :Gwangju Buk-gu:

======= Base Person Management Menu ========
= 0.exit 1.display 2.clear 3.add 4.replace =
= 5.remove 6.find 7.collections            =
============================================
menu item? 2

======= Base Person Management Menu ... 3.add ...
menu item? 3
[0] Yang20 1387 83.3 true :Daegu Buk-gu:
[1] Song21 1451 67.7 true :Daejeon Buk-gu:
[2] Ryoo22 1457 60.9 true :Incheon Buk-gu:
[3] Kimm23 1135 98.2 true :Gwangju Seo-gu:
[4] Seoh24 1905 50.7 true :Ulsan Nam-gu:
[5] Kimm25 1223 40.5 true :Seoul Dong-gu:
[6] Park26 1957 82.7 true :Busan Jung-gu:
[7] Johh27 1319 96.7 true :Ulsan Buk-gu:
[8] Choi28 1688 91.2 false :Ulsan Nam-gu:
[9] Jooh29 1797 92.9 true :Ulsan Nam-gu:

======= Base Person Management Menu ... 4.replace ...
menu item? 4
[0] Ryoo30 1534 83.4 false :Seoul Seo-gu:
[1] Jeon31 1762 66.4 false :Gwangju Dong-gu:
[2] Yoon32 1245 70.1 true :Ulsan Buk-gu:
[3] Baeh33 1859 61.1 true :Incheon Dong-gu:
[4] Jooh34 1778 41.7 false :Daejeon Nam-gu:
[5] Kimm25 1223 40.5 true :Seoul Dong-gu:
[6] Park26 1957 82.7 true :Busan Jung-gu:
[7] Johh27 1319 96.7 true :Ulsan Buk-gu:
[8] Choi28 1688 91.2 false :Ulsan Nam-gu:
[9] Jooh29 1797 92.9 true :Ulsan Nam-gu:

======= Base Person Management Menu ... 5.remove ...
menu item? 5
index to delete? 0
[0] Jeon31 1762 66.4 false :Gwangju Dong-gu:
[1] Yoon32 1245 70.1 true :Ulsan Buk-gu:
[2] Baeh33 1859 61.1 true :Incheon Dong-gu:
[3] Jooh34 1778 41.7 false :Daejeon Nam-gu:
[4] Kimm25 1223 40.5 true :Seoul Dong-gu:
[5] Park26 1957 82.7 true :Busan Jung-gu:
[6] Johh27 1319 96.7 true :Ulsan Buk-gu:
[7] Choi28 1688 91.2 false :Ulsan Nam-gu:
[8] Jooh29 1797 92.9 true :Ulsan Nam-gu:

======= Base Person Management Menu ... 6.find ...
menu item? 6
name to find? xxx
xxx: NOT found

======= Base Person Management Menu ... 6.find ...
menu item? 6
name to find? Johh27
[6] Johh27 1319 96.7 true :Ulsan Buk-gu:

======= Base Person Management Menu ... 7.collections ...
menu item? 7
not supported by MyVector


/******************************************************************************
 * 코드 추가 5
 ******************************************************************************/
// 1) Memo의 String memoData를 아래의 내용으로 전체를 교체하라. (반드시 전체를 복사해서 삽입하라.)
//-----------------------------------------------------------------------------
    private String memoData =  
           "ten ten ten ten ten ten ten ten ten ten\n" + 
        "eight eight eight eight eight eight eight eight\n" + 
        "EIGHT EIGHT EIGHT EIGHT EIGHT EIGHT EIGHT EIGHT\n" + 
        "seven seven seven seven seven seven seven\n" + 
        "six six six six six six\n" + 
        "five five five five five\n" + 
        "four four four four\n" + 
        "three three three\n" + 
        "- - - - - - - - - - - - - - - - - - - - -\n" +
        "The Last of the Mohicans\n"+
        "James Fenimore Cooper\n"+
        "Author's Introduction\n"+
        "It is believed that the scene of this tale, and most of the information \n"+
        "necessary to understand its allusions, are rendered sufficiently \n"+
        "obvious to the reader in the text itself, or in the accompanying notes.\n"+
        "Still there is so much obscurity in the Indian traditions, and so much \n"+
        "confusion in the Indian names, as to render some explanation useful.\n"+
        "Few men exhibit greater diversity, or, if we may so express it, \n"+
        "greater antithesis of character, \n"+
        "than the native warrior of North America.";
//-----------------------------------------------------------------------------
// 2) Memo::run()의 menuStr을 아래 내용으로 교체하고 MENU_COUNT도 수정하라.
//-----------------------------------------------------------------------------
        String menuStr =  // ch7_3
        "+++++++++++++++++++++ Memo Management Menu +++++++++++++++++++\n"+
        "+ 0.exit 1.display 2.find 3.findReplace 4.compare 5.dispByLn +\n"+
        "+ 6.delLn 7.replLn 8.scrollUp 9.scrollDown 10.inputMemo      +\n"+
        "+ 11.wordCount 12.countWordList                              +\n"+
        "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
//-----------------------------------------------------------------------------
// 3) Memo::run()의 switch 문장 내에 아래 내용을 추가하라.
//-----------------------------------------------------------------------------
            case 11:wordCount();     break; // ch7_3
            case 12:countWordList(); break; // ch7_3
//-----------------------------------------------------------------------------
// 4) Memo 클래스의 맨 마지막에 아래 멤버 함수들을 추가하라.
//-----------------------------------------------------------------------------
    void wordCount() { // Menu item 11,  ch7_3
    }
    void countWordList() { // Menu item 12,  ch7_3
    }
//-----------------------------------------------------------------------------


/******************************************************************************
 * 추가 연습용 문제
 ******************************************************************************/
// 여기까지만 해서 프로그램을 제출하면 된다.
// 위 메모와 관련한 추가 코드는 실습용 문제인 ch7-4 문제를 위한 메뉴 부분을 수정한 것이다.
// Vector, Map, String 등을 활용하는 종합문제인 위 wordCount(), countWordList() 함수는
// ch7-4 문제에서 다룰 예정이다. 
// 이 문제는 과제 제출은 하지 않아도 되나 본인의 실력 및 라이브 코딩을 위해서 반드시 도전해 보기 바란다.
// 비록 과제 제출은 하지 않아도 위 코드는 교체되어 있어야 
// 향후 과제에서 메모 메뉴 출력시 위와 똑 같이 출력될 수 있을 것이다.
//-----------------------------------------------------------------------------


/******************************************************************************
 * 프로그램의 자동오류체크 방법
 ******************************************************************************/
// clc.chosun.ac.kr의 [강의자료실]의 "자동_오류_체크_방법" 파일을 참고하기 바란다.

// Main.java의 main() 함수 내에서 아래 문장의 [주석]을 제거하고 실행하면 자동오류체크가 실행된다.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else

/******************************************************************************
 * 자동오류체크 실행결과
 ******************************************************************************/
ch7-3-1 : O
Good bye!!

/******************************************************************************
 * 프로그램 제출
 ******************************************************************************/
// 1. 중요: Main.java의 main() 함수 내에서 아래 문장처럼 [주석] 처리한 후 저장하라.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else
//    경고: 위 문장을 주석처리 하지 않은 채 제출할 경우 oj 시스템에서 컴파일 에러가 발생할 것이다. 
// 2. 프로그램 소스인 Main.java만을 oj.chosun.ac.kr에 제출하라. 
//    제출 시 AutoCheck.java 파일은 제출하지 않아도 된다.
//-----------------------------------------------------------------------------

