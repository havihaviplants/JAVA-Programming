[7장 문제-1]

//----------------------------------------------------------------------------
// 아래 문제를 해결하는 도중 출력이 잘못되었거나 문제 설명과 출력이 일치하지 않거나 오타가 있거나 등등
// 조금이라도 문제에 이상한 것이 있으면 주저하지 말고 jhshim@chosun.ac.kr로 알려 주시기 바랍니다.
//----------------------------------------------------------------------------

/******************************************************************************
 * 프로젝트 및 소스파일 생성
 ******************************************************************************/
// 1) 이클립스에서 CH7-1 프로젝트를 만들어라. 
// 2) 기존 CH6-2 프로젝트에서 AutoCheck.java를 포함한 소스파일들을 모두 복사하라.
//    즉, 기존 소스 파일들을 모두 선택한 후 CH7-1/src/(default package) 위로 드래깅한 후 
//    Ctrl를 누른채 드랍한다.
// 3) clc의 [강의자료실]에서 CH7-1 과제와 관련된 자동오류체크를 위한 파일들을 다운받는다
//    만약 test 폴더 밑에 또 test 폴더가 있다면(즉, test/test) 안쪽 test 폴더를 사용하라. 


/******************************************************************************
 * [코드 추가 1]
 ******************************************************************************/
// 1) 프로그램의 맨 앞쪽 주석 부분의 "Author: " 행 다음의 내용을 아래 내용으로 교체하라.
//----------------------------------------------------------------------------

//  + PersonManager: pVector 데이타 타입 Vector< Person >으로 수정
//  + PersonManager::append() 수정
//  + PersonManager::생성자에 cpCount = 0; 문장을 추가(static 해제)
//  + PersonManager::shuffle() 함수 Math.random() 대신 Random 클래스 객체 사용
//  + PersonManager의 일부 멤버 함수 직접 구현해 보기
//  + PersonManager::run() 메뉴 항목 추가 및 collections() 함수 추가
//  + CollectionsMenu 클래스 추가
//  + CollectionsByList 클래스 추가
//  + Person에 Comparable< Person > 인터페이스 구현

/******************************************************************************
 * 문제: 1
 * 요점: Vector 클래스 활용
 ******************************************************************************/
// 우리는 그 동안 우리가 작성한 VectorPerson 클래스를 활용하여 Person 객체들을 관리하였다.
// 이제 우리가 작성한 VectorPerson와 기능이 동일한 자바 라이브러리 클래스를 활용해 보기로 하자.
// 1) PersonManager의 아래 문장을 아래처럼 주석처리하라.
//-----------------------------------------------------------------------------
    //private VectorPerson pVector;
//-----------------------------------------------------------------------------
// 2) 위 문장 아래 줄에 아래 문장을 추가하라.
//    이 문장은 자바 라이브러리의 Vector< E > 클래스를 활용하는 것이다.
//-----------------------------------------------------------------------------
    private Vector< Person > pVector;
//-----------------------------------------------------------------------------
// 3) PersonManager::append()는 무조건 count 개수만큼 for 문을 실행하였다. 이번에는
//    입력을 잘못한 경우(사람 구분자 틀린 경우) count 값이 증가되지 않도록 else 문장을 추가하라.
//    즉, 정상적인 객체들만 count 개수만큼 입력 받을 수 있도록 수정하라.
//-----------------------------------------------------------------------------
// 4) i) PersonManager의 cpCount 멤버 선언에서 아래처럼 static을 제거하라. 
//       굳이 static으로 선언할 필요없기 때문이다.
//-----------------------------------------------------------------------------
    int cpCount;
//-----------------------------------------------------------------------------
//    ii) 또한 PersonManager의 생성자에 이 변수를 초기화하는 아래 문장을 추가하라.
//        PersonManager에 들어와서 copy()할 때 매번 동일한 객체들을 생성하기 위함이다. 
//-----------------------------------------------------------------------------
        cpCount = 0;                     // 7_1 추가
//-----------------------------------------------------------------------------
// 5) i) PersonManager에 아래 멤버를 새로 추가하라.
//       이 rand 객체를 이용하여 새로운 난수를 발생시킬 예정이다.
//-----------------------------------------------------------------------------
    private Random rand; // 7_1 추가
//-----------------------------------------------------------------------------
//    ii) PersonManager의 생성자에 아래 문장을 추가하라.
//-----------------------------------------------------------------------------
        rand = new Random(0);  // 0: seed 값임, 7_1 추가
//-----------------------------------------------------------------------------
//    iii) PersonManager::shuffle()에서 아래 문장을 아래처럼 주석처리하라.
//-----------------------------------------------------------------------------
            //int j = (int)(Math.random() * pVector.size());
//-----------------------------------------------------------------------------
//    iv) 그 밑에 아래 문장을 추가하라. 이 문장은 위 문장과 기능은 동일하지만 rand 생성시 seed 값을 
//        지정했기 때문에 PersonManager에 새로 들어 올 때마다 항상 같은 결과를 얻을 수 있다.
//        이는 OJ와 자동오류체크 시 동일한 결과를 얻기 위함이다.
//        아래 문장은 0에서 (pVector.size()-1)까지의 난수를 발생한다.
//-----------------------------------------------------------------------------
            int j = rand.nextInt(pVector.size()); // [0 ~ (pVector.size()-1)] 
//-----------------------------------------------------------------------------

===============================================================================
==  문제 1 실행 결과
=============================================================================== 

******* Main Menu ... 1.PersonManager ...
menu item? 1
...

=================== Person Management Menu =====================
= 0.exit 1.display 2.clear 3.reset 4.remove 5.copy 6.append    =
= 7.insert 8.login 9.dispStudent(5_3) 10.dispPhone(5_3)        =
= 11.find(6_1) 12.wrapper(6_1) 13.shuffle(6_1) 14.setDate(6_1) =
= 15.chAddress(6_2)                                            =
================================================================
menu item? 1
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

=================== Person Management Menu ... 5.copy ...
menu item? 5
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[6] pp0 30 71.0 true :Gwangju ,Nam-gu , Bongseon-dong 21:
[7] pp1 31 62.1 false :Jong-ro 1-gil,Jongno-gu,   Seoul:
[8] ss1 21 66.4 false :Jongno-gu Seoul: Physics 3.8 1
[9] ss2 22 55.3 true :Yeonje-gu Busan: Electronics 2.5 4
[10] ww1 23 34.3 true :Kangnam-gu Seoul: Samsung Director
[11] ww2 24 45.4 false :Dobong-gu Kwangju: Hyundai Manager

=================== Person Management Menu ... 3.reset ...
menu item? 3
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

======================= Person Management Menu ... 13.shuffle(6_1) ...
menu item? 13
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[2] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[3] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[4] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[5] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:

======================= Person Management Menu ... 13.shuffle(6_1) ...
menu item? 13
[0] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[1] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[2] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[3] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[4] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[5] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4

=================== Person Management Menu ... 2.clear ...
menu item? 2

=================== Person Management Menu ... 1.display ...
menu item? 1

=================== Person Management Menu ... 6.append ...
menu item? 6
number of persons to append?     5
    K p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:
    P p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:
    S s3 12 71.5 false :Gwangju Nam-gu Bongseon-dong 21: Computer 3.3 2
    W w3 13 65 true :Jong-ro 1-gil, Jongno-gu, Seoul: Kia CEO
    S s4 15 80 true :1001, Jungang-daero, Yeonje-gu, Busan: Biology 3.8 3
    W w4 16 77 false :Buk-ro 3, Kangdong-gu, Seoul: Naver Department-Head
input 5 [delimiter(P,S,or W)] [person information] to append:
K: WRONG delimiter
[0] p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:
[1] s3 12 71.5 false :Gwangju Nam-gu Bongseon-dong 21: Computer 3.3 2
[2] w3 13 65.0 true :Jong-ro 1-gil, Jongno-gu, Seoul: Kia CEO
[3] s4 15 80.0 true :1001, Jungang-daero, Yeonje-gu, Busan: Biology 3.8 3
[4] w4 16 77.0 false :Buk-ro 3, Kangdong-gu, Seoul: Naver Department-Head

=================== Person Management Menu ... 7.insert ...
menu item? 7
index to insert in front? 7
7: OUT of selection range(0 ~ 5) Try again!!
index to insert in front? 0
input [delimiter(P,S,or W)] [person information] to insert:
W w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[0] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[1] p3 11 83.3 true :100 Dunsan-ro Seo-gu Daejeon:
[2] s3 12 71.5 false :Gwangju Nam-gu Bongseon-dong 21: Computer 3.3 2
[3] w3 13 65.0 true :Jong-ro 1-gil, Jongno-gu, Seoul: Kia CEO
[4] s4 15 80.0 true :1001, Jungang-daero, Yeonje-gu, Busan: Biology 3.8 3
[5] w4 16 77.0 false :Buk-ro 3, Kangdong-gu, Seoul: Naver Department-Head

=================== Person Management Menu ... 2.clear ...
menu item? 2

=================== Person Management Menu ... 7.insert ...
menu item? 7
input [delimiter(P,S,or W)] [person information] to insert:
W w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[0] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

=================== Person Management Menu ... 7.insert ...
menu item? 7
index to insert in front? 1
input [delimiter(P,S,or W)] [person information] to insert:
S s3 12 71.5 false :Gwangju Nam-gu Bongseon-dong 21: Computer 3.3 2
[0] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[1] s3 12 71.5 false :Gwangju Nam-gu Bongseon-dong 21: Computer 3.3 2


/******************************************************************************
 * 문제: 2
 * 요점: Vector 클래스의 멤버 함수 활용
 ******************************************************************************/
// 1) PersonManager 클래스의 아래 각 멤버 함수를 아래 함수로 교체하라.
// 2) 아래 각 함수 내의 xxx 부분의 코드를 완성하라.
//    아래는 Vector 클래스의 멤버함수 활용법을 연습하기 위함이다. 
//    라이브 코딩에서도 이러한 Vector의 멤버함수를 활용하는 문제가 출제될 수 있으니
//    기존의 코드를 보지 말고 본인 스스로 해결해 보기 바란다.
//-----------------------------------------------------------------------------
    public void display() { // Menu item 1
        int count = xxx; // ToDo: pVector의 모든 원소의 개수
        //System.out.println("display(): count " + count);
        for (int i = 0; i < count; ++i)
            // ToDo: pVector의 인덱스 i번째 객체 출력
            System.out.println("[" + i + "] " + xxx);  
        //System.out.println("empty():" + pVector.isEmpty() + ", size():" + pVector.size()
        //     + ", capacity():" + pVector.capacity());
    }
    public void clear() {  // Menu item 2
        xxx; // ToDo: pVector의 모든 원소를 삭제하라.
        display();
    } 
    public void reset() { // Menu item 3
        xxx; // ToDo: pVector의 모든 원소를 삭제하라.
        addArray();
        display();
    }
    public void remove() { // Menu item 4
        if (xxx) { // ToDo: pVector의 원소가 하나도 없을 경우
            System.out.println("no entry to remove");
            return;
        }
        int index = UI.getIndex("index to delete? ", pVector.size());
        xxx; // ToDo: pVector의 index 원소를 삭제하라.
        display();
    }
    public void copy() { // Menu item 5
        cpCount++;
        // ToDo: pVector의 각각의 원소 인덱스 i에 대해
        for (int i = 0, size = xxx; i < size; ++i) { 
            Person p = xxx; // ToDo: pVector의 i번째 원소를 복제해서 p에 저장하라.
            String name = p.getName();
            for (int j = 0; j < cpCount; ++j)
                name = name.charAt(0)+name;
            p.set(name);
            p.set(p.getId() + 20 * cpCount);
            p.set(p.getWeight() + cpCount);
            if (cpCount % 2 == 1)
                p.set(!p.getMarried());
            xxx; // ToDo: p를 pVector의 맨 뒤에 추가하라.
        }
        display();
    }
    public void append() { // Menu item 6
        int count = UI.getPosInt("number of persons to append? ");
        factory.printInputNotice(" "+Integer.toString(count), " to append");
        for (int i = 0; i < count; ++i) {
            Person p = factory.inputPerson(UI.scan);
            // ToDo: p가 잘못 입력된 객체가 아닌 경우 p를 pVector의 맨 뒤에 추가하고,
            //       p가 잘못 입력된 객체인 경우 입력 개수에 포함시키지 않는다.
            //       (즉, i 값이 증가되지 말아야 함) 과거 코드가 잘못되었을 수 있음
        }
        display();
    }
    public void insert() { // Menu item 7
        int index = 0;
        if (pVector.size() > 0) {
            // ToDo: 새로운 원소를 삽입할 장소는 pVector의 
            //       인덱스 0에서부터 마지막 원소 바로 다음 장소까지 삽입 가능하다. 
            index = UI.getIndex("index to insert in front? ", xxx);
            if (index < 0) return;
        }
        factory.printInputNotice("", " to insert");
        Person p = factory.inputPerson(UI.scan);
        xxx; // ToDo: 객체 p가 잘못 입력된 객체인 경우 여기서 리턴하라.
        xxx; // ToDo: 객체 p를 pVector의 index 위치에 삽입하라.
        display();
    }

    private void addArray() {
        // ToDo: array의 모든 원소를 순서적으로 복사한 후 pVector에 추가하라.
    }

===============================================================================
==  문제 2 실행 결과
=============================================================================== 

// 프로그램 실행 결과는 앞 전 문제의 실행 결과와 동일해야 한다.


/******************************************************************************
 * 코드 추가 2
 ******************************************************************************/
// 이제 벡터 또는 리스트를 활용한 다양한 알고리즘들(Collections 함수들)을 테스트해 보자. 먼저
// 1) PersonManager::run()의 menuStr에 아래 문자열을 삽입하고, MENU_COUNT도 적절히 수정하라.
//-----------------------------------------------------------------------------
            "= 15.chAddress(6_2) 16.collections(7_1)                        =\n" +
//-----------------------------------------------------------------------------
// 2) PersonManager::chAddress() 뒤에 아래 메소드를 새로 추가하라.
//-----------------------------------------------------------------------------
    public void collections() { // Menu item 16: ch7_1
        new CollectionsByList(pVector).run();
    }
//-----------------------------------------------------------------------------
// 3) PersonManager::run()에 16 메뉴 항목을 선택했을 때 
//    위 함수를 호출하도록 switch 문장에 적절한 코드를 삽입하라.
//-----------------------------------------------------------------------------
// 4) 아래 CollectionsMenu 클래스를 MultiManager 클래스 뒤에 배치하라.
//    이 클래스는 Collections 클래스에서 제공되는 다양한 함수들을 활용하기 위한 메뉴를 
//    제공하고 선택된 메뉴항목을 실행하는 클래스이다. 메뉴항목의 함수들은 추상함수이므로 
//    향후 이 클래스를 상속하는 CollectionsByList, CollectionsByMap 등과 
//    같은 클래스에서 이 함수들을 목적에 맞게 적절히 구현해야 한다.
//-----------------------------------------------------------------------------
abstract class CollectionsMenu // ch7_1
{
    public void run() {
        String menuStr =
            "======================= Collections Menu =======================\n" +
            "= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch =\n" +
            "================================================================\n";
        final int MENU_COUNT = 7;
        while (true) {
            int menuItem = UI.selectMenu(menuStr, MENU_COUNT);
            switch(menuItem) {
            case 1:display();         break;
            case 2:min();             break;
            case 3:max();             break;
            case 4:sort();            break;
            case 5:reverse();         break;
            case 6:binarySearch();    break;
            case 0:                   return;
            }
        }
    }
    abstract public void display(); // Menu item 1
    abstract public void min(); // Menu item 2
    abstract public void max(); // Menu item 3
    abstract public void sort(); // Menu item 4
    abstract public void reverse(); // Menu item 5
    abstract public void binarySearch(); // Menu item 6
}
//-----------------------------------------------------------------------------
// 5) 아래 CollectionsByList 클래스를 CollectionsMenu 클래스 뒤에 배치하라.
//    이 클래스는 CollectionsMenu를 상속하여 구현한 것이다.
//    아래 함수들은 PersonManager::run()에서 메뉴 항목 16번을 선택했을 때 CollectionsMenu의
//    run()이 실행되고 CollectionsMenu의 메뉴 선택에 의해 실행되는 함수들이다. 
//-----------------------------------------------------------------------------

class CollectionsByList extends CollectionsMenu // ch7_1
{
    // List는 인터페이스로 ArrayList, Vector, LinkedList의 수퍼 클래스이다.
    private List< Person > list; // list는 벡터라 생각하고 사용하면 된다.

    public CollectionsByList(List< Person > list) { 
    	this.list = list; // list는 PersonManager의 pVector가 업캐스팅된 것이다.
    }
    @Override
    public void display() { // Menu item 1
        for (int i = 0, count = list.size(); i < count; ++i)
            System.out.println("[" + i + "] " + list.get(i));
    }
    @Override
    public void min() { // Menu item 2
        // ToDo: list(사실 pVector임)의 모든 객체들 중 사전적 순서상으로
        //       가장 빠른 이름을 찾아 그 객체를 출력하라.
        //       Collections의 적절한 함수 호출하면 됨.
        //       list가 비었을 경우는 그냥 리턴하라.
    }
    @Override
    public void max() { // Menu item 3
        // ToDo: list(사실 pVector임)의 모든 객체들 중 사전적 순서상으로
        //       가장 나중에 나오는 이름을 찾아 그 객체를 출력하라.
        //       list가 비었을 경우는 그냥 리턴하라.
    }
    @Override
    public void sort() { // Menu item 4
        // ToDo: list의 모든 원소들을 이름(name) 순으로 정렬(sort)하라. 
        //       (Collections의 적절한 함수 호출할 것)
        display();
    }
    @Override
    public void reverse() { // Menu item 5
        // ToDo: list의 모든 원소들의 배치 순서를 거꾸(reverse)로  
        //       배치하라. (Collections의 적절한 함수 호출할 것)
        display();
    }
    @Override
    public void binarySearch() {  // Menu item 6
        String name = UI.getNext("For binary search, it's needed to sort in advance. Name to search? ");
        // ToDo: name을 입력 받은 후 name을 원소로 가지는 임시 Person 객체를 생성한 후
        //       이 객체와 동일한 이름을 가진 객체를 list에서 이진 검색하여 찾는다. 
        //       (Collectons의 적절한 함수 호출할 것:  
        //        이 함수는 찾은 원소의 인덱스를 반환하고 못 찾은 경우 -1을 반환한다.)
        //       list에서 찾았으면 해당 객체를 출력하고
        //           찾지 못했으면 실행결과처럼 "이름 is NOT found." 를 출력하라.
        // 주의: 이진 검색하기 전에 먼저 list가 정렬이 되어 있어야 한다.
    }
}   // ch7_1: CollectionsByList class


/******************************************************************************
 * 문제: 3
 * 요점: 인터페이스 Comparable< T > 구현
 ******************************************************************************/
// Vector< E >, LinkedList< E >, ArrayList< E > 들은 인터페이스 List< E >를 구현한 
// 클래스들이다. 따라서 이들 클래스들을 총칭해서 List라 한다.
//-----------------------------------------------------------------------------
// Collections 클래스의 sort(), binarySearch(), min(), max() 등의 함수는 List< E > 
// 내의 원소(E)들을 정렬하고, 찾고, 최소, 최대를 구하기 위해 원소들의 크기를 비교할 수 있어야 한다. 
// 이를 위해 타입매개변수인 E 클래스는 크기를 비교할 수 있는 함수를 제공해야 한다. 
// 예를 들어, Vector< String >인 경우 원소들의 타입인 String 클래스는 크기를 비교할 수 있는 
// 멤버 함수인 int compareTo(String s)를 제공하고 있다.
//-----------------------------------------------------------------------------
// 따라서 우리도 PersonManager 내의 Vector< Person > pVector에 Collections의 함수들인
// sort(), binarySearch(), min(), max() 들을 적용하기 위해서는 Person 클래스에 
// 크기를 비교하는 함수인 int compareTo(Person p)를 제공해야 한다.
//-----------------------------------------------------------------------------
// 1) Person 클래스에 아래처럼 인터페이스 Comparable< Person >를 구현하라.
//-----------------------------------------------------------------------------
class Person implements Comparable< Person > // interface 7_1
//-----------------------------------------------------------------------------
// 인터페이스 Comparable< Person >은 아래와 같이 정의되어 있다.
//-----------------------------------------------------------------------------
Interface Comparable< T > {
    int compareTo(T m);
}
//-----------------------------------------------------------------------------
// 2) Person 클래스에 Comparable< Person >의 멤버 함수인 아래 멤버 함수를 구현해 넣어라.
//    이 함수 구현 시 현재 객체의 name과 p 객체의 name 문자열을 서로 비교한 결과를 반환하라.
//    즉, 현재 객체의 이름이 작으면 -1, 같으면 0, 크면 1을 반환한다.
//    힌트: String 클래스도 이미 int compareTo(String s) 멤버 함수를 제공한다. 이를 활용하라.
//-----------------------------------------------------------------------------
int compareTo(Person p);
//-----------------------------------------------------------------------------

/******************************************************************************
 * 문제 4
 * 요점: Collections 클래스의 static 메소드들 활용하기 
 ******************************************************************************/
// CollectionsByList의 모든 멤버 함수들을 구현하라.
// 각 함수 내의 주석을 참고하고 또한 [교재 예제 7-8]도 참조하라. Collections의 멤버 함수 호출 시
// 매개변수로 교재의 예제에서는 LinkedList 객체이지만 Vector나 ArrayList 객체도 가능하다.
// CollectionsByList의 list는 PersonManager의 Vector< Person > pVector가 업캐스팅된 
// 것이니 벡터라 생각하고 사용하면 된다.

===============================================================================
== 문제 3, 4 실행 결과
=============================================================================== 
...
=================== Person Management Menu =====================
= 0.exit 1.display 2.clear 3.reset 4.remove 5.copy 6.append    =
= 7.insert 8.login 9.dispStudent(5_3) 10.dispPhone(5_3)        =
= 11.find(6_1) 12.wrapper(6_1) 13.shuffle(6_1) 14.setDate(6_1) =
= 15.chAddress(6_2) 16.collections(7_1)                        =
================================================================
menu item? 13
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[2] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[3] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[4] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[5] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:

=================== Person Management Menu ...
= 15.chAddress(6_2) 16.collections(7_1) ...
menu item? 16

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch =
================================================================
menu item? 1
// 위 13 메뉴 항목과 동일

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch ...
menu item? 2
p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch ...
menu item? 3
w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch =
================================================================
menu item? 4
[0] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:
[1] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[2] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[3] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[4] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[5] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch ...
menu item? 6
For binary search, it's needed to sort in advance. Name to search? s1
s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch ...
menu item? 5
[0] w2 4 44.4 true :Dobong-gu Kwangju: Hyundai Manager
[1] w1 3 33.3 false :Kangnam-gu Seoul: Samsung Director
[2] s2 2 54.3 false :Yeonje-gu Busan: Electronics 2.5 4
[3] s1 1 65.4 true :Jongno-gu Seoul: Physics 3.8 1
[4] p1 11 61.1 true :Jong-ro 1-gil,Jongno-gu,   Seoul:
[5] p0 10 70.0 false :Gwangju ,Nam-gu , Bongseon-dong 21:

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch ...
menu item? 6
For binary search, it's needed to sort in advance. Name to search? s1
s1 is NOT found.    // 정렬이 되어 있지 않을 경우 못 찾는 경우 발생함

======================= Collections Menu =======================
= 0.exit 1.display 2.min 3.max 4.sort 5.reverse 6.binarySearch ...
menu item? 0

=================== Person Management Menu ... 2.clear ...
menu item? 2

=================== Person Management Menu ... 16.collections(7_1)...
menu item? 16

======================= Collections Menu ... 1.display ...
menu item? 1    // list가 비어 있을 경우

======================= Collections Menu ... 2.min ...
menu item? 2

======================= Collections Menu ... 3.max  ...
menu item? 3

======================= Collections Menu ... 4.sort ...
menu item? 4

======================= Collections Menu ... 5.reverse ...
menu item? 5

======================= Collections Menu ... 6.binarySearch ...
menu item? 6
For binary search, it's needed to sort in advance. Name to search? s1
s1 is NOT found.


/******************************************************************************
 * 프로그램의 자동오류체크 방법
 ******************************************************************************/
// clc.chosun.ac.kr의 [강의자료실]의 "자동_오류_체크_방법" 파일을 참고하기 바란다.

// Main.java의 main() 함수 내에서 아래 문장의 [주석]을 제거하고 실행하면 자동오류체크가 실행된다.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else

/******************************************************************************
 * 자동오류체크 실행결과
 ******************************************************************************/
ch7-1-1 : O
ch7-1-2 : O
ch7-1-3 : O
ch7-1-4 : O
Good bye!!

/******************************************************************************
 * 프로그램 제출
 ******************************************************************************/
// 1. 중요: Main.java의 main() 함수 내에서 아래 문장처럼 [주석] 처리한 후 저장하라.
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else
//    경고: 위 문장을 주석처리 하지 않은 채 제출할 경우 oj 시스템에서 컴파일 에러가 발생할 것이다. 
// 2. 프로그램 소스인 Main.java만을 oj.chosun.ac.kr에 제출하라. 
//    제출 시 AutoCheck.java 파일은 제출하지 않아도 된다.
//-----------------------------------------------------------------------------

